/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/canvas_board */ \"./src/scripts/canvas_board.js\");\n/* harmony import */ var _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sample_inputs */ \"./src/scripts/sample_inputs.js\");\n/* harmony import */ var _scripts_game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/game */ \"./src/scripts/game.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const description = document.querySelector(\"#description\");\n  const hideAndShowButton = document.querySelector(\"#hide-button\");\n  hideAndShowButton.addEventListener(\"click\", e => {\n    if (description.style.display === 'inline-block') {\n      description.style.display = \"none\";\n      hideAndShowButton.innerText = \"Instructions\";\n    } else {\n      description.style.display = \"inline-block\";\n      hideAndShowButton.innerText = \"Hide\";\n    }\n\n    ;\n  });\n  const canvas = document.querySelector(\"canvas\");\n  const ctx = canvas.getContext('2d');\n\n  if (window.screen.width < 500) {\n    canvas.width = window.screen.width * .95;\n    canvas.height = window.screen.width * .96;\n  } else {\n    canvas.height = 600;\n    canvas.width = 600;\n  }\n\n  const sampleInputs = new _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__.SampleInputs();\n  let board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, canvas.width, canvas.height, sampleInputs.puzzle1);\n  let game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(sampleInputs.puzzle1);\n  const resetButton = document.querySelector(\"#reset-button\");\n  let selectedCell = 0;\n  game.checkErrors();\n  board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  const puzzleSelector = document.querySelector(\"#puzzle-select\");\n  puzzleSelector.addEventListener(\"change\", e => {\n    if (puzzleSelector.value === 'puzzle1') {\n      board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, 600, 600, sampleInputs.puzzle1);\n      game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(sampleInputs.puzzle1);\n    } else {\n      board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, 600, 600, sampleInputs.puzzle2);\n      game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(sampleInputs.puzzle2);\n    }\n\n    game.clearPenMarks();\n    game.clearPencilMarks();\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  const themeSelect = document.querySelector(\"#theme-select\");\n  themeSelect.addEventListener(\"change\", e => {\n    board.theme = themeSelect.value;\n    board.getColors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  resetButton.addEventListener(\"click\", () => {\n    game.clearPenMarks();\n    game.clearPencilMarks();\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  const pencilPad = document.querySelector('#pencilPad');\n  ;\n  console.log('pencilPad: ', pencilPad);\n  const penPad = document.querySelector('#penPad');\n  ;\n\n  for (let i = 0; i < 9; i++) {\n    let penButton = document.createElement('button');\n    let pencilButton = document.createElement('button');\n    penButton.innerText = i + 1;\n    pencilButton.innerText = i + 1;\n    penButton.classList.add('numButton');\n    pencilButton.classList.add('numButton');\n    penPad.appendChild(penButton);\n    pencilPad.appendChild(pencilButton);\n  }\n\n  pencilPad.addEventListener('click', e => {\n    if (game.pencilMarks[selectedCell][parseInt(e.target.innerText) - 1] === -1) {\n      game.pencilMarks[selectedCell][parseInt(e.target.innerText) - 1] = parseInt(e.target.innerText - 1);\n    } else {\n      game.pencilMarks[selectedCell][parseInt(e.target.innerText) - 1] = -1;\n    }\n\n    ;\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  penPad.addEventListener('click', e => {\n    if (game.penMarks[selectedCell] === parseInt(e.target.innerText)) {\n      game.penMarks[selectedCell] = 0;\n    } else {\n      game.penMarks[selectedCell] = parseInt(e.target.innerText);\n    }\n\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  canvas.addEventListener(\"click\", e => {\n    let y = e.clientY - e.target.getBoundingClientRect().top;\n    let x = e.clientX - e.target.getBoundingClientRect().left;\n    selectedCell = board.getCellNumber(x, y);\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  document.addEventListener(\"keydown\", e => {\n    if (selectedCell != null) {\n      if (!isNaN(parseInt(e.key))) {\n        if (parseInt(e.key) === game.penMarks[selectedCell]) {\n          game.penMarks[selectedCell] = 0;\n        } else {\n          game.penMarks[selectedCell] = parseInt(e.key);\n        }\n\n        ;\n      } else if (e.key === 'Backspace') {\n        game.penMarks[selectedCell] = 0;\n\n        for (let i = 0; i < 9; i++) {\n          game.pencilMarks[selectedCell][i] = -1;\n        }\n      } else if (e.key === 'ArrowLeft') {\n        if (selectedCell % 9 != 0) {\n          selectedCell--;\n        }\n      } else if (e.key === 'ArrowUp') {\n        if (selectedCell > 8) {\n          selectedCell -= 9;\n        }\n\n        ;\n      } else if (e.key === 'ArrowRight') {\n        if (selectedCell % 9 != 8) {\n          selectedCell++;\n        }\n\n        ;\n      } else if (e.key === 'ArrowDown') {\n        if (selectedCell < 72) {\n          selectedCell += 9;\n        }\n\n        ;\n      } else if (['!', '@', '#', '$', '%', '^', '&', '*', '('].includes(e.key)) {\n        const shiftMaps = {\n          ['!']: 1,\n          ['@']: 2,\n          ['#']: 3,\n          ['$']: 4,\n          ['%']: 5,\n          ['^']: 6,\n          ['&']: 7,\n          ['*']: 8,\n          ['(']: 9\n        };\n\n        if (game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] === -1) {\n          game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] = shiftMaps[e.key] - 1;\n        } else {\n          game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] = -1;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/canvas_board.js":
/*!*************************************!*\
  !*** ./src/scripts/canvas_board.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasBoard\": function() { return /* binding */ CanvasBoard; }\n/* harmony export */ });\nclass CanvasBoard {\n  constructor(boardSize, gridWidth, gridHeight, sumGroups) {\n    this.boardSize = boardSize;\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.sumGroups = sumGroups;\n    this.sumClues = [];\n    this.walls = [];\n    this.corners = [];\n    this.colors = [];\n    this.selectColor = '#d9d3c9';\n    this.theme = 'none';\n  }\n\n  update(ctx, selectedCell, penMarks, pencilMarks, errors) {\n    this.drawBackground(ctx);\n    this.drawColors(ctx);\n\n    if (selectedCell != null) {\n      this.highlightSelectedCell(ctx, selectedCell);\n    }\n\n    this.drawSumsOvelay(ctx);\n    this.drawCorners(ctx);\n    this.drawSumClues(ctx, selectedCell);\n    this.drawGridLines(ctx);\n    this.drawPenMarks(ctx, penMarks, errors);\n    this.drawPencilMarks(ctx, penMarks, pencilMarks);\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.gridWidth, this.gridHeight);\n  }\n\n  drawGridLines(ctx) {\n    ctx.setLineDash([]);\n\n    for (let i = 1; i < this.boardSize; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.gridHeight / this.boardSize * i);\n      ctx.lineTo(this.gridWidth, this.gridHeight / this.boardSize * i);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(this.gridWidth / this.boardSize * i, 0);\n      ctx.lineTo(this.gridWidth / this.boardSize * i, this.gridHeight);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n    }\n\n    ;\n  }\n\n  drawPenMarks(ctx, penMarkings, errors) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] != 0) {\n          // hard-coded font size = 30px\n          ctx.font = `${this.gridWidth / 16}px serif`;\n          ctx.fillStyle = 'black';\n\n          if (errors[currIndex]) {\n            ctx.fillStyle = 'rgb(189, 17, 17)';\n          } // offsets: 25 and 45\n\n\n          ctx.fillText(`${penMarkings[currIndex]}`, this.gridWidth / 9 * j + this.gridWidth / 25, this.gridHeight / 9 * i + this.gridWidth / 13);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawPencilMarks(ctx, penMarkings, pencilMarkings) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] === 0) {\n          let pencilIndex = 0;\n\n          for (let c = 0; c < 3; c++) {\n            for (let r = 0; r < 3; r++) {\n              if (pencilMarkings[currIndex][pencilIndex] != -1) {\n                // 15px\n                ctx.font = `${this.gridWidth / 50}px serif`;\n                ctx.fillStyle = \"black\"; // 15, 15, 15, 25\n\n                ctx.fillText(`${pencilMarkings[currIndex][pencilIndex] + 1}`, this.gridWidth / 9 * j + r * this.gridWidth / 55 + this.gridWidth / 30, this.gridHeight / 9 * i + c * this.gridWidth / 40 + this.gridWidth / 25);\n              }\n\n              ;\n              pencilIndex++;\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  highlightSelectedCell(ctx, cellNumber) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (currIndex === cellNumber) {\n          ctx.rect(this.gridHeight / 9 * j, this.gridWidth / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n          ctx.fillStyle = this.selectColor;\n          ctx.fill();\n        } else if (currIndex > cellNumber) {\n          break;\n        }\n\n        ;\n        currIndex++;\n      }\n    }\n  }\n\n  getCellNumber(x, y) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.gridHeight / this.boardSize * j < x && x < this.gridHeight / this.boardSize * j + this.gridHeight / this.boardSize) {\n          if (this.gridWidth / this.boardSize * i < y && y < this.gridWidth / this.boardSize * i + this.gridWidth / this.boardSize) {\n            return currIndex;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getAdjacentCells(index) {\n    let north = index - this.boardSize;\n    let east = index + 1;\n    let south = index + this.boardSize;\n    let west = index - 1;\n    const adjacent = {\n      n: north,\n      e: east,\n      s: south,\n      w: west\n    };\n    return adjacent;\n  }\n\n  getWalls() {\n    const walls = [];\n\n    for (let i = 0; i < this.boardSize ** 2; i++) {\n      walls.push({\n        n: false,\n        e: false,\n        s: false,\n        w: false\n      });\n    }\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        const adjacentInclude = dir => {\n          return !this.sumGroups[i].cells.includes(dir);\n        };\n\n        let adjacentCells = this.getAdjacentCells(this.sumGroups[i].cells[j]);\n\n        if (adjacentInclude(adjacentCells.n)) {\n          walls[this.sumGroups[i].cells[j]].n = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.e)) {\n          walls[this.sumGroups[i].cells[j]].e = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.s)) {\n          walls[this.sumGroups[i].cells[j]].s = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.w)) {\n          walls[this.sumGroups[i].cells[j]].w = true;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return walls;\n  }\n\n  drawSumsOvelay(ctx) {\n    if (this.walls.length === 0) {\n      this.walls = this.getWalls();\n    }\n\n    let currIndex = 0;\n    let wallOffset = this.gridWidth / 85;\n    console.log('wallOffSet: ', wallOffset);\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        ctx.beginPath();\n        ctx.setLineDash([5, 5]);\n        ctx.strokeStyle = 'grey';\n\n        if (this.walls[currIndex].n) {\n          ctx.moveTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridWidth / 9 * i + wallOffset);\n        }\n\n        if (this.walls[currIndex].e) {\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n        }\n\n        if (this.walls[currIndex].s) {\n          ctx.moveTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + (this.gridHeight / 9 - wallOffset));\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n        }\n\n        if (this.walls[currIndex].w) {\n          ctx.moveTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n        }\n\n        ctx.stroke();\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawSumClues(ctx, selectedCell) {\n    if (this.sumClues.length === 0) {\n      this.sumClues = new Array(81).fill(0);\n\n      for (let i = 0; i < this.sumGroups.length; i++) {\n        this.sumClues[this.sumGroups[i].cells[0]] = this.sumGroups[i].sum;\n      }\n\n      ;\n    }\n\n    ;\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.sumClues[currIndex] != 0) {\n          if (selectedCell != null && currIndex === selectedCell) {\n            ctx.fillStyle = this.selectColor;\n          } else {\n            ctx.fillStyle = this.colors[currIndex];\n          }\n\n          ; // 23, 20\n\n          ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, this.gridWidth / 22, this.gridWidth / 22); // 17px\n\n          ctx.font = `${this.gridWidth / 30}px serif`;\n          ctx.fillStyle = 'rgb(189, 17, 17)'; // +5, +17\n\n          ctx.fillText(`${this.sumClues[currIndex]}`, this.gridWidth / 9 * j + this.gridWidth / 90, this.gridHeight / 9 * i + this.gridWidth / 28);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getColors() {\n    let colors = [];\n\n    if (this.theme === 'none') {\n      colors = ['white'];\n      this.selectColor = '#d9d3c9';\n    } else if (this.theme === 'random') {\n      for (let i = 0; i < 100; i++) {\n        colors.push(`rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`);\n      }\n\n      ;\n      this.selectColor = 'white';\n    } else if (this.theme === 'pastel') {\n      colors = ['#fbf8cc', '#fde4cf', '#ffcfd2', '#f1c0e8', '#cfbaf0', '#a3c4f3', '#90dbf4', '#8eecf5', '#98f5e1', '#b9fbc0'];\n      this.selectColor = 'white';\n    } else if (this.theme === 'greyscale') {\n      this.selectColor = 'white';\n      colors = ['#f8f9fa', '#C2C0C4', '#dee2e6', '#ced4da', '#adb5bd', '#B8B5BA', '#AEABB0', '#E1DFE1', '#e9ecef', '#D7D5D7'];\n    }\n\n    let colIndex = 0;\n    let cellColors = new Array(81).fill(0);\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      // let color = colors[Math.floor(Math.random() * colors.length)];\n      let color = colors[colIndex];\n\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        cellColors[this.sumGroups[i].cells[j]] = color;\n      }\n\n      ;\n\n      if (colIndex + 1 === colors.length) {\n        colIndex = 0;\n      } else {\n        colIndex++;\n      }\n    }\n\n    ;\n    this.colors = cellColors;\n  }\n\n  drawColors(ctx) {\n    if (this.colors.length === 0) {\n      this.getColors();\n    }\n\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        ctx.fillStyle = this.colors[currIndex];\n        ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getCorners() {\n    if (this.walls.length === 0) {\n      this.getWalls();\n    }\n\n    ;\n    let corners = [];\n\n    for (let i = 0; i < 81; i++) {\n      let corner = {\n        ne: false,\n        se: false,\n        sw: false,\n        nw: false\n      };\n      let adjacent = this.getAdjacentCells(i);\n\n      if (0 <= adjacent.n && adjacent.n < 81) {\n        if (!this.walls[adjacent.n].s) {\n          if (this.walls[adjacent.n].e) {\n            if (0 <= adjacent.e < 81 && !this.walls[adjacent.e].w) {\n              if (this.walls[adjacent.e].n) {\n                corner.ne = true;\n              }\n            }\n          }\n        }\n      }\n\n      if (0 <= adjacent.s && adjacent.s < 81) {\n        if (!this.walls[adjacent.s].n) {\n          if (this.walls[adjacent.s].e) {\n            if (0 <= adjacent.e < 81 && !this.walls[adjacent.e].w) {\n              if (this.walls[adjacent.e].s) {\n                corner.se = true;\n              }\n            }\n          }\n        }\n      }\n\n      if (0 <= adjacent.n && adjacent.n < 81) {\n        if (!this.walls[adjacent.n].s) {\n          if (this.walls[adjacent.n].w) {\n            if (0 <= adjacent.w < 81 && !this.walls[adjacent.w].e) {\n              if (this.walls[adjacent.w].n) {\n                corner.nw = true;\n              }\n            }\n          }\n        }\n      }\n\n      if (0 <= adjacent.s && adjacent.s < 81) {\n        if (!this.walls[adjacent.s].n) {\n          if (0 <= adjacent.w && adjacent.w < 81) {\n            if (this.walls[adjacent.s].w) {\n              if (0 <= adjacent.w < 81 && !this.walls[adjacent.w].e) {\n                if (this.walls[adjacent.w].s) {\n                  corner.sw = true;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      corners.push(corner);\n    }\n\n    ;\n    this.corners = corners;\n  }\n\n  drawCorners(ctx) {\n    if (this.corners.length === 0) {\n      this.getCorners();\n    }\n\n    let wallOffset = this.gridWidth / 85;\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.corners[currIndex].ne) {\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9, this.gridWidth / 9 * i + wallOffset);\n          ctx.stroke();\n        }\n\n        if (this.corners[currIndex].se) {\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9);\n          ctx.stroke();\n        }\n\n        if (this.corners[currIndex].nw) {\n          ctx.moveTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i);\n          ctx.lineTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j, this.gridHeight / 9 * i + wallOffset);\n          ctx.stroke();\n        }\n\n        if (this.corners[currIndex].sw) {\n          ctx.moveTo(this.gridWidth / 9 * j, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9 - wallOffset);\n          ctx.lineTo(this.gridWidth / 9 * j + wallOffset, this.gridHeight / 9 * i + this.gridHeight / 9);\n          ctx.stroke();\n        }\n\n        currIndex++;\n      }\n    }\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/canvas_board.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": function() { return /* binding */ Game; }\n/* harmony export */ });\nclass Game {\n  constructor(sumGroups) {\n    let gridSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 81;\n    this.gridSize = gridSize;\n    this.penMarks = new Array(gridSize).fill(0);\n    this.pencilMarks = [];\n    this.errors = new Array(gridSize).fill(false);\n    this.sumGroups = sumGroups;\n    this.rowMaps = [];\n    this.colMaps = [];\n    this.sqrMaps = [];\n    this.sumMaps = [];\n    this.getMaps();\n    this.clearPencilMarks();\n  }\n\n  getMaps() {\n    if (this.rowMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.rowMaps.push(i);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.colMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.colMaps.push(j);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sqrMaps.length === 0) {\n      this.sqrMaps = new Array(this.gridSize).fill(-1);\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        if (this.colMaps[currIndex] < 3) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 0;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 3;\n          } else {\n            this.sqrMaps[currIndex] = 6;\n          }\n\n          ;\n        } else if (this.colMaps[currIndex] < 6) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 1;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 4;\n          } else {\n            this.sqrMaps[currIndex] = 7;\n          }\n\n          ;\n        } else {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 2;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 5;\n          } else {\n            this.sqrMaps[currIndex] = 8;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sumMaps.length === 0) {\n      this.sumMaps = new Array(this.gridSize).fill(0);\n      let currIndex = 0;\n\n      for (let group of this.sumGroups) {\n        for (let i = 0; i < group.cells.length; i++) {\n          this.sumMaps[group.cells[i]] = currIndex;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  checkErrors() {\n    let rowErrors = this.getGroupErrors(this.rowMaps);\n    let colErrors = this.getGroupErrors(this.colMaps);\n    let sqrErrors = this.getGroupErrors(this.sqrMaps);\n    let sumErrors = this.getSumErrors();\n    this.errors = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      if (rowErrors[i] || colErrors[i] || sqrErrors[i] || sumErrors[i]) {\n        this.errors.push(true);\n      } else {\n        this.errors.push(false);\n      }\n    }\n  }\n\n  checkGroup(group) {\n    let counts = {};\n    let seen = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (seen.includes(group[i])) {\n        counts[group[i]] += 1;\n      } else {\n        seen.push(group[i]);\n        counts[group[i]] = 1;\n      }\n\n      ;\n    }\n\n    ;\n    let groupErrors = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (counts[group[i]] > 1) {\n        groupErrors.push(true);\n      } else {\n        groupErrors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n    return groupErrors;\n  }\n\n  getGroupErrors(groupMap) {\n    let groupErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let group = [];\n\n      for (let j = 0; j < 81; j++) {\n        if (groupMap[j] === i) {\n          group.push(this.penMarks[j]);\n        }\n\n        ;\n      }\n\n      ;\n      groupErrors = groupErrors.concat(this.checkGroup(group));\n    }\n\n    ;\n    let remappedErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let subA = [];\n      remappedErrors.push(subA);\n    }\n\n    ;\n\n    for (let i = 0; i < groupErrors.length; i++) {\n      remappedErrors[groupMap[i]].push(groupErrors[i]);\n    }\n\n    return remappedErrors.flat();\n  }\n\n  getSumErrors() {\n    let sumErrors = [];\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      let group = [];\n\n      for (let j = 0; j < this.sumMaps.length; j++) {\n        if (this.sumMaps[j] === i) {\n          group.push(this.penMarks[j]);\n        }\n\n        ;\n      }\n\n      ;\n      sumErrors.push(this.checkGroup(group));\n    }\n\n    ;\n    let remappedErrors = [];\n\n    for (let i = 0; i < 81; i++) {\n      remappedErrors.push(0);\n    }\n\n    ;\n\n    for (let i = 0; i < sumErrors.length; i++) {\n      for (let j = 0; j < sumErrors[i].length; j++) {\n        remappedErrors[this.sumGroups[i].cells[j]] = sumErrors[i][j];\n      }\n\n      ;\n    }\n\n    ;\n    return remappedErrors;\n  }\n\n  clearPenMarks() {\n    this.penMarks = new Array(this.gridSize).fill(0);\n  }\n\n  clearPencilMarks() {\n    this.pencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      this.pencilMarks.push(new Array(Math.sqrt(this.gridSize)).fill(-1));\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/sample_inputs.js":
/*!**************************************!*\
  !*** ./src/scripts/sample_inputs.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SampleInputs\": function() { return /* binding */ SampleInputs; }\n/* harmony export */ });\nclass SampleInputs {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 81;\n    this.gridSize = gridSize;\n    this.samplePenMarks = [6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.blankPenMarks = new Array(this.gridSize).fill(0);\n    this.samplePencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      let cell = new Array(9).fill(-1);\n      this.samplePencilMarks.push(cell);\n    }\n\n    ;\n    this.puzzle1 = [{\n      sum: 11,\n      cells: [0, 9, 10, 19]\n    }, {\n      sum: 25,\n      cells: [1, 2, 3, 12]\n    }, {\n      sum: 14,\n      cells: [4, 13]\n    }, {\n      sum: 9,\n      cells: [5, 6]\n    }, {\n      sum: 12,\n      cells: [7, 8]\n    }, {\n      sum: 15,\n      cells: [11, 20]\n    }, {\n      sum: 4,\n      cells: [14, 15]\n    }, {\n      sum: 14,\n      cells: [16, 25]\n    }, {\n      sum: 6,\n      cells: [17, 26]\n    }, {\n      sum: 40,\n      cells: [18, 27, 36, 37, 38, 39, 45, 54]\n    }, {\n      sum: 3,\n      cells: [21, 30]\n    }, {\n      sum: 15,\n      cells: [22, 31]\n    }, {\n      sum: 9,\n      cells: [23, 24]\n    }, {\n      sum: 8,\n      cells: [28, 29]\n    }, {\n      sum: 12,\n      cells: [32, 33]\n    }, {\n      sum: 38,\n      cells: [34, 35, 42, 43, 44, 52, 53]\n    }, {\n      sum: 11,\n      cells: [40, 41]\n    }, {\n      sum: 15,\n      cells: [46, 47]\n    }, {\n      sum: 13,\n      cells: [48, 57]\n    }, {\n      sum: 6,\n      cells: [49, 58]\n    }, {\n      sum: 4,\n      cells: [50, 51]\n    }, {\n      sum: 17,\n      cells: [55, 63, 64, 72]\n    }, {\n      sum: 7,\n      cells: [56, 65]\n    }, {\n      sum: 13,\n      cells: [59, 60]\n    }, {\n      sum: 10,\n      cells: [61, 70]\n    }, {\n      sum: 6,\n      cells: [62, 71]\n    }, {\n      sum: 26,\n      cells: [66, 73, 74, 75]\n    }, {\n      sum: 4,\n      cells: [67, 76]\n    }, {\n      sum: 15,\n      cells: [68, 69]\n    }, {\n      sum: 11,\n      cells: [77, 78]\n    }, {\n      sum: 12,\n      cells: [79, 80]\n    }];\n    this.puzzle2 = [{\n      sum: 6,\n      cells: [0, 1]\n    }, {\n      sum: 10,\n      cells: [2, 3]\n    }, {\n      sum: 9,\n      cells: [4, 13]\n    }, {\n      sum: 15,\n      cells: [5, 6]\n    }, {\n      sum: 9,\n      cells: [7, 8]\n    }, {\n      sum: 16,\n      cells: [9, 18, 19, 28]\n    }, {\n      sum: 15,\n      cells: [10, 11]\n    }, {\n      sum: 15,\n      cells: [12, 21]\n    }, {\n      sum: 3,\n      cells: [14, 23]\n    }, {\n      sum: 5,\n      cells: [15, 16]\n    }, {\n      sum: 21,\n      cells: [17, 25, 26, 34]\n    }, {\n      sum: 10,\n      cells: [20, 29]\n    }, {\n      sum: 24,\n      cells: [22, 30, 31, 32]\n    }, {\n      sum: 9,\n      cells: [24, 33]\n    }, {\n      sum: 13,\n      cells: [27, 36]\n    }, {\n      sum: 17,\n      cells: [35, 44]\n    }, {\n      sum: 4,\n      cells: [37, 38]\n    }, {\n      sum: 20,\n      cells: [39, 47, 48]\n    }, {\n      sum: 9,\n      cells: [40, 49]\n    }, {\n      sum: 8,\n      cells: [41, 50, 51]\n    }, {\n      sum: 8,\n      cells: [42, 43]\n    }, {\n      sum: 19,\n      cells: [45, 46, 55, 56]\n    }, {\n      sum: 28,\n      cells: [52, 53, 60, 61]\n    }, {\n      sum: 26,\n      cells: [54, 63, 64, 65]\n    }, {\n      sum: 13,\n      cells: [57, 66, 74, 75]\n    }, {\n      sum: 12,\n      cells: [58, 67, 76]\n    }, {\n      sum: 27,\n      cells: [59, 68, 77, 78]\n    }, {\n      sum: 13,\n      cells: [62, 69, 70, 71]\n    }, {\n      sum: 12,\n      cells: [72, 73]\n    }, {\n      sum: 9,\n      cells: [79, 80]\n    }]; // Error checking\n\n    this.penErrors = [6, 0, 0, 6, 0, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.penIndeces = [];\n\n    for (let i = 0; i < 81; i++) {\n      this.penIndeces.push(i);\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/sample_inputs.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;