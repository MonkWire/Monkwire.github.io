/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/canvas_board */ \"./src/scripts/canvas_board.js\");\n/* harmony import */ var _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sample_inputs */ \"./src/scripts/sample_inputs.js\");\n/* harmony import */ var _scripts_game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/game */ \"./src/scripts/game.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const description = document.querySelector(\"#description\");\n  const hideAndShowButton = document.querySelector(\"#hide-button\");\n  hideAndShowButton.addEventListener(\"click\", e => {\n    if (description.style.display === 'none') {\n      description.style.display = \"inline-block\";\n      hideAndShowButton.innerText = \"Hide\";\n    } else {\n      description.style.display = \"none\";\n      hideAndShowButton.innerText = \"Instructions\";\n    }\n\n    ;\n  });\n  const canvas = document.querySelector(\"canvas\");\n  const ctx = canvas.getContext('2d');\n  canvas.height = 600;\n  canvas.width = 600;\n  const sampleInputs = new _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__.SampleInputs();\n  const board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, 600, 600, sampleInputs.sampleGroups);\n  const game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(sampleInputs.sampleGroups);\n  const resetButton = document.querySelector(\"#reset-button\");\n  game.penMarks = game.sumMaps;\n  let selectedCell = 0;\n  game.checkErrors();\n  board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  const themeSelect = document.querySelector(\"#theme-select\");\n  themeSelect.addEventListener(\"change\", e => {\n    board.theme = themeSelect.value;\n    board.getColors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  resetButton.addEventListener(\"click\", () => {\n    game.clearPenMarks();\n    game.clearPencilMarks();\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  canvas.addEventListener(\"click\", e => {\n    let y = e.clientY - e.target.getBoundingClientRect().top;\n    let x = e.clientX - e.target.getBoundingClientRect().left;\n    selectedCell = board.getCellNumber(x, y);\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  document.addEventListener(\"keydown\", e => {\n    if (selectedCell != null) {\n      if (!isNaN(parseInt(e.key))) {\n        if (parseInt(e.key) === game.penMarks[selectedCell]) {\n          game.penMarks[selectedCell] = 0;\n        } else {\n          game.penMarks[selectedCell] = parseInt(e.key);\n        }\n\n        ;\n      } else if (e.key === 'Backspace') {\n        game.penMarks[selectedCell] = 0;\n\n        for (let i = 0; i < 9; i++) {\n          game.pencilMarks[selectedCell][i] = -1;\n        }\n      } else if (e.key === 'ArrowLeft') {\n        if (selectedCell % 9 != 0) {\n          selectedCell--;\n        }\n      } else if (e.key === 'ArrowUp') {\n        if (selectedCell > 8) {\n          selectedCell -= 9;\n        }\n\n        ;\n      } else if (e.key === 'ArrowRight') {\n        if (selectedCell % 9 != 8) {\n          selectedCell++;\n        }\n\n        ;\n      } else if (e.key === 'ArrowDown') {\n        if (selectedCell < 72) {\n          selectedCell += 9;\n        }\n\n        ;\n      } else if (['!', '@', '#', '$', '%', '^', '&', '*', '('].includes(e.key)) {\n        const shiftMaps = {\n          ['!']: 1,\n          ['@']: 2,\n          ['#']: 3,\n          ['$']: 4,\n          ['%']: 5,\n          ['^']: 6,\n          ['&']: 7,\n          ['*']: 8,\n          ['(']: 9\n        };\n\n        if (game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] === -1) {\n          game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] = shiftMaps[e.key] - 1;\n        } else {\n          game.pencilMarks[selectedCell][shiftMaps[e.key] - 1] = -1;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/canvas_board.js":
/*!*************************************!*\
  !*** ./src/scripts/canvas_board.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasBoard\": function() { return /* binding */ CanvasBoard; }\n/* harmony export */ });\nclass CanvasBoard {\n  constructor(boardSize, gridWidth, gridHeight, sumGroups) {\n    this.boardSize = boardSize;\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.sumGroups = sumGroups;\n    this.sumClues = [];\n    this.walls = [];\n    this.colors = [];\n    this.selectColor = '#d9d3c9';\n    this.theme = 'greyscale';\n  }\n\n  update(ctx, selectedCell, penMarks, pencilMarks, errors) {\n    this.drawBackground(ctx);\n    this.drawColors(ctx);\n\n    if (selectedCell != null) {\n      this.highlightSelectedCell(ctx, selectedCell);\n    }\n\n    ;\n    this.drawSumsOvelay(ctx);\n    this.drawSumClues(ctx, selectedCell);\n    this.drawGridLines(ctx);\n    this.drawPenMarks(ctx, penMarks, errors);\n    this.drawPencilMarks(ctx, penMarks, pencilMarks);\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.gridWidth, this.gridHeight);\n  }\n\n  drawGridLines(ctx) {\n    ctx.beginPath();\n    ctx.rect(0, 0, this.gridWidth, this.gridHeight);\n    ctx.setLineDash([]);\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 8;\n    ctx.stroke();\n\n    for (let i = 0; i < this.boardSize; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.gridHeight / this.boardSize * i);\n      ctx.lineTo(this.gridWidth, this.gridHeight / this.boardSize * i);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(this.gridWidth / this.boardSize * i, 0);\n      ctx.lineTo(this.gridWidth / this.boardSize * i, this.gridHeight);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n    }\n\n    ;\n  }\n\n  drawPenMarks(ctx, penMarkings, errors) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] != 0) {\n          ctx.font = '30px serif';\n          ctx.fillStyle = 'black';\n\n          if (errors[currIndex]) {\n            ctx.fillStyle = 'rgb(189, 17, 17)';\n          }\n\n          ctx.fillText(`${penMarkings[currIndex]}`, this.gridWidth / 9 * j + 25, this.gridHeight / 9 * i + 45);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawPencilMarks(ctx, penMarkings, pencilMarkings) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] === 0) {\n          let pencilIndex = 0;\n\n          for (let c = 0; c < 3; c++) {\n            for (let r = 0; r < 3; r++) {\n              if (pencilMarkings[currIndex][pencilIndex] != -1) {\n                ctx.font = '15px serif';\n                ctx.fillStyle = \"black\";\n                ctx.fillText(`${pencilMarkings[currIndex][pencilIndex] + 1}`, this.gridWidth / 9 * j + r * 20 + 10, this.gridHeight / 9 * i + c * 20 + 20);\n              }\n\n              ;\n              pencilIndex++;\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  highlightSelectedCell(ctx, cellNumber) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (currIndex === cellNumber) {\n          ctx.rect(this.gridHeight / 9 * j, this.gridWidth / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n          ctx.fillStyle = this.selectColor;\n          ctx.fill();\n        } else if (currIndex > cellNumber) {\n          break;\n        }\n\n        ;\n        currIndex++;\n      }\n    }\n  }\n\n  getCellNumber(x, y) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.gridHeight / this.boardSize * j < x && x < this.gridHeight / this.boardSize * j + this.gridHeight / this.boardSize) {\n          if (this.gridWidth / this.boardSize * i < y && y < this.gridWidth / this.boardSize * i + this.gridWidth / this.boardSize) {\n            return currIndex;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getAdjacentCells(index) {\n    let north = index - this.boardSize;\n    let east = index + 1;\n    let south = index + this.boardSize;\n    let west = index - 1;\n    const adjacent = {\n      n: north,\n      e: east,\n      s: south,\n      w: west\n    };\n    return adjacent;\n  }\n\n  getWalls() {\n    const walls = [];\n\n    for (let i = 0; i < this.boardSize ** 2; i++) {\n      walls.push({\n        n: false,\n        e: false,\n        s: false,\n        w: false\n      });\n    }\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        const adjacentInclude = dir => {\n          return !this.sumGroups[i].cells.includes(dir);\n        };\n\n        let adjacentCells = this.getAdjacentCells(this.sumGroups[i].cells[j]);\n\n        if (adjacentInclude(adjacentCells.n)) {\n          walls[this.sumGroups[i].cells[j]].n = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.e)) {\n          walls[this.sumGroups[i].cells[j]].e = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.s)) {\n          walls[this.sumGroups[i].cells[j]].s = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.w)) {\n          walls[this.sumGroups[i].cells[j]].w = true;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return walls;\n  }\n\n  drawSumsOvelay(ctx) {\n    if (this.walls.length === 0) {\n      this.walls = this.getWalls();\n    }\n\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.walls[currIndex].n) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridWidth / 9 * i + 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].e) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].s) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + (this.gridHeight / 9 - 7));\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].w) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawSumClues(ctx, selectedCell) {\n    if (this.sumClues.length === 0) {\n      this.sumClues = new Array(81).fill(0);\n\n      for (let i = 0; i < this.sumGroups.length; i++) {\n        this.sumClues[this.sumGroups[i].cells[0]] = this.sumGroups[i].sum;\n      }\n\n      ;\n    }\n\n    ;\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.sumClues[currIndex] != 0) {\n          if (selectedCell != null && currIndex === selectedCell) {\n            ctx.fillStyle = this.selectColor;\n          } else {\n            ctx.fillStyle = this.colors[currIndex];\n          }\n\n          ;\n          ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, 23, 20);\n          ctx.font = '17px serif';\n          ctx.fillStyle = 'rgb(189, 17, 17)';\n          ctx.fillText(`${this.sumClues[currIndex]}`, this.gridWidth / 9 * j + 5, this.gridHeight / 9 * i + 17);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getColors() {\n    let colors = [];\n\n    if (this.theme === 'none') {\n      colors = ['white'];\n      this.selectColor = '#d9d3c9';\n    } else if (this.theme === 'random') {\n      for (let i = 0; i < 100; i++) {\n        colors.push(`rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`);\n      }\n\n      ;\n      this.selectColor = 'white';\n    } else if (this.theme === 'pastel') {\n      colors = ['#fbf8cc', '#fde4cf', '#ffcfd2', '#f1c0e8', '#cfbaf0', '#a3c4f3', '#90dbf4', '#8eecf5', '#98f5e1', '#b9fbc0'];\n      this.selectColor = 'white';\n    } else if (this.theme === 'greyscale') {\n      this.selectColor = 'white';\n      colors = ['#f8f9fa', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#B8B5BA', '#AEABB0', '#E1DFE1', '#C2C0C4', '#D7D5D7'];\n    }\n\n    let cellColors = new Array(81).fill(0);\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      // let color = 'white'\n      let color = colors[Math.floor(Math.random() * colors.length)]; // let color = `rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})`\n\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        cellColors[this.sumGroups[i].cells[j]] = color;\n      }\n\n      ;\n    }\n\n    ;\n    this.colors = cellColors;\n  }\n\n  drawColors(ctx) {\n    if (this.colors.length === 0) {\n      this.getColors();\n    }\n\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        ctx.fillStyle = this.colors[currIndex];\n        ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n        currIndex++;\n      }\n    }\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/canvas_board.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": function() { return /* binding */ Game; }\n/* harmony export */ });\nclass Game {\n  constructor(sumGroups) {\n    let gridSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 81;\n    this.gridSize = gridSize;\n    this.penMarks = new Array(gridSize).fill(0);\n    this.pencilMarks = [];\n    this.errors = new Array(gridSize).fill(false);\n    this.sumGroups = sumGroups;\n    this.rowMaps = [];\n    this.colMaps = [];\n    this.sqrMaps = [];\n    this.sumMaps = [];\n    this.getMaps();\n    this.clearPencilMarks();\n  }\n\n  getMaps() {\n    if (this.rowMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.rowMaps.push(i);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.colMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.colMaps.push(j);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sqrMaps.length === 0) {\n      this.sqrMaps = new Array(this.gridSize).fill(-1);\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        if (this.colMaps[currIndex] < 3) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 0;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 3;\n          } else {\n            this.sqrMaps[currIndex] = 6;\n          }\n\n          ;\n        } else if (this.colMaps[currIndex] < 6) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 1;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 4;\n          } else {\n            this.sqrMaps[currIndex] = 7;\n          }\n\n          ;\n        } else {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 2;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 5;\n          } else {\n            this.sqrMaps[currIndex] = 8;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sumMaps.length === 0) {\n      this.sumMaps = new Array(this.gridSize).fill(0);\n      let currIndex = 0;\n\n      for (let group of this.sumGroups) {\n        for (let i = 0; i < group.cells.length; i++) {\n          this.sumMaps[group.cells[i]] = currIndex;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  checkErrors() {\n    let rowErrors = this.getGroupErrors(this.rowMaps);\n    let colErrors = this.getGroupErrors(this.colMaps);\n    let sqrErrors = this.getGroupErrors(this.sqrMaps);\n    let sumErrors = this.getSumErrors();\n    this.errors = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      if (rowErrors[i] || colErrors[i] || sqrErrors[i] || sumErrors[i]) {\n        this.errors.push(true);\n      } else {\n        this.errors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  checkGroup(group) {\n    let counts = {};\n    let seen = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (seen.includes(group[i])) {\n        counts[group[i]] += 1;\n      } else {\n        seen.push(group[i]);\n        counts[group[i]] = 1;\n      }\n\n      ;\n    }\n\n    ;\n    let groupErrors = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (counts[group[i]] > 1) {\n        groupErrors.push(true);\n      } else {\n        groupErrors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n    return groupErrors;\n  }\n\n  getGroupErrors(groupMap) {\n    let groupErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let group = [];\n\n      for (let j = 0; j < 81; j++) {\n        if (groupMap[j] === i) {\n          group.push(this.penMarks[j]);\n        }\n\n        ;\n      }\n\n      ;\n      groupErrors = groupErrors.concat(this.checkGroup(group));\n    }\n\n    ;\n    let remappedErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let subA = [];\n      remappedErrors.push(subA);\n    }\n\n    ;\n\n    for (let i = 0; i < groupErrors.length; i++) {\n      remappedErrors[groupMap[i]].push(groupErrors[i]);\n    }\n\n    return remappedErrors.flat();\n  }\n\n  getSumErrors() {\n    let sumErrors = [];\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      let group = [];\n\n      for (let j = 0; j < this.sumMaps.length; j++) {\n        if (this.sumMaps[j] === i) {\n          group.push(this.penMarks[j]);\n        }\n\n        ;\n      }\n\n      ;\n      sumErrors.push(this.checkGroup(group));\n    }\n\n    ;\n    console.log('sumErrors: ', sumErrors);\n    console.log('sumMaps: ', this.sumMaps);\n    let remappedErrors = [];\n\n    for (let i = 0; i < 81; i++) {\n      remappedErrors.push(0);\n    }\n\n    ;\n\n    for (let i = 0; i < sumErrors.length; i++) {\n      for (let j = 0; j < sumErrors[i].length; j++) {\n        remappedErrors[this.sumGroups[i].cells[j]] = sumErrors[i][j];\n      }\n\n      ;\n    }\n\n    ;\n    console.log('remappedErrors: ', remappedErrors);\n    return remappedErrors;\n  }\n\n  clearPenMarks() {\n    this.penMarks = new Array(this.gridSize).fill(0);\n  }\n\n  clearPencilMarks() {\n    this.pencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      this.pencilMarks.push(new Array(Math.sqrt(this.gridSize)).fill(-1));\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/sample_inputs.js":
/*!**************************************!*\
  !*** ./src/scripts/sample_inputs.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SampleInputs\": function() { return /* binding */ SampleInputs; }\n/* harmony export */ });\nclass SampleInputs {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 81;\n    this.gridSize = gridSize;\n    this.samplePenMarks = [6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.blankPenMarks = new Array(this.gridSize).fill(0);\n    this.samplePencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      let cell = [];\n\n      for (let j = 0; j < 9; j++) {\n        cell.push(-1);\n      }\n\n      this.samplePencilMarks.push(cell);\n    }\n\n    ;\n    this.sampleGroups = [{\n      sum: 11,\n      cells: [0, 9, 10, 19]\n    }, {\n      sum: 25,\n      cells: [1, 2, 3, 12]\n    }, {\n      sum: 14,\n      cells: [4, 13]\n    }, {\n      sum: 9,\n      cells: [5, 6]\n    }, {\n      sum: 12,\n      cells: [7, 8]\n    }, {\n      sum: 15,\n      cells: [11, 20]\n    }, {\n      sum: 4,\n      cells: [14, 15]\n    }, {\n      sum: 14,\n      cells: [16, 25]\n    }, {\n      sum: 6,\n      cells: [17, 26]\n    }, {\n      sum: 40,\n      cells: [18, 27, 36, 37, 38, 39, 45, 54]\n    }, {\n      sum: 3,\n      cells: [21, 30]\n    }, {\n      sum: 15,\n      cells: [22, 31]\n    }, {\n      sum: 9,\n      cells: [23, 24]\n    }, {\n      sum: 8,\n      cells: [28, 29]\n    }, {\n      sum: 12,\n      cells: [32, 33]\n    }, {\n      sum: 38,\n      cells: [34, 35, 42, 43, 44, 52, 53]\n    }, {\n      sum: 11,\n      cells: [40, 41]\n    }, {\n      sum: 15,\n      cells: [46, 47]\n    }, {\n      sum: 13,\n      cells: [48, 57]\n    }, {\n      sum: 6,\n      cells: [49, 58]\n    }, {\n      sum: 4,\n      cells: [50, 51]\n    }, {\n      sum: 17,\n      cells: [55, 63, 64, 72]\n    }, {\n      sum: 7,\n      cells: [56, 65]\n    }, {\n      sum: 13,\n      cells: [59, 60]\n    }, {\n      sum: 10,\n      cells: [61, 70]\n    }, {\n      sum: 6,\n      cells: [62, 71]\n    }, {\n      sum: 26,\n      cells: [66, 73, 74, 75]\n    }, {\n      sum: 4,\n      cells: [67, 76]\n    }, {\n      sum: 15,\n      cells: [68, 69]\n    }, {\n      sum: 11,\n      cells: [77, 78]\n    }, {\n      sum: 12,\n      cells: [79, 80]\n    }]; // Error checking\n\n    this.penErrors = [6, 0, 0, 6, 0, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.penIndeces = [];\n\n    for (let i = 0; i < 81; i++) {\n      this.penIndeces.push(i);\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEYsRUFBcUYsQ0FBckYsRUFBd0YsQ0FBeEYsRUFBMkYsQ0FBM0YsRUFBOEYsQ0FBOUYsRUFBaUcsQ0FBakcsRUFBb0csQ0FBcEcsRUFBdUcsQ0FBdkcsRUFBMEcsQ0FBMUcsRUFBNkcsQ0FBN0csRUFBZ0gsQ0FBaEgsRUFBbUgsQ0FBbkgsRUFBc0gsQ0FBdEgsRUFBeUgsQ0FBekgsRUFBNEgsQ0FBNUgsRUFBK0gsQ0FBL0gsRUFBa0ksQ0FBbEksRUFBcUksQ0FBckksRUFBd0ksQ0FBeEksRUFBMkksQ0FBM0ksRUFBOEksQ0FBOUksRUFBaUosQ0FBakosRUFBb0osQ0FBcEosRUFBdUosQ0FBdkosRUFBMEosQ0FBMUosRUFBNkosQ0FBN0osRUFBZ0ssQ0FBaEssRUFBbUssQ0FBbkssRUFBc0ssQ0FBdEssRUFBeUssQ0FBekssRUFBNEssQ0FBNUssRUFBK0ssQ0FBL0ssRUFBa0wsQ0FBbEwsRUFBcUwsQ0FBckwsRUFBd0wsQ0FBeEwsRUFBMkwsQ0FBM0wsRUFBOEwsQ0FBOUwsRUFBaU0sQ0FBak0sRUFBb00sQ0FBcE0sRUFBdU0sQ0FBdk0sRUFBME0sQ0FBMU0sRUFBNk0sQ0FBN00sRUFBZ04sQ0FBaE4sRUFBbU4sQ0FBbk4sRUFBc04sQ0FBdE4sRUFBeU4sQ0FBek4sRUFBNE4sQ0FBNU4sRUFBK04sQ0FBL04sRUFBa08sQ0FBbE8sRUFBcU8sQ0FBck8sRUFBd08sQ0FBeE8sRUFBMk8sQ0FBM08sRUFBOE8sQ0FBOU8sRUFBaVAsQ0FBalAsQ0FBakI7SUFFQSxLQUFLQyxVQUFMLEdBQWtCLEVBQWxCOztJQUNBLEtBQUssSUFBSVIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtNQUN6QixLQUFLUSxVQUFMLENBQWdCTCxJQUFoQixDQUFxQkgsQ0FBckI7SUFDSDs7SUFBQTtFQUdKOztBQXhEcUI7QUF5RHpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanNfcHJvamVjdC8uL3NyYy9zY3JpcHRzL3NhbXBsZV9pbnB1dHMuanM/ZDA2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU2FtcGxlSW5wdXRzIHtcbiAgICBjb25zdHJ1Y3RvcihncmlkU2l6ZT04MSkge1xuICAgICAgICB0aGlzLmdyaWRTaXplID0gZ3JpZFNpemU7XG4gICAgICAgIHRoaXMuc2FtcGxlUGVuTWFya3MgPSBbNiwgMCwgMCwgMCwgMCwgOCwgMCwgMCwgMCwgMCwgMCwgMCwgNiwgMCwgMCwgOCwgMCwgOSwgMCwgMCwgMSwgMywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNiwgMCwgMCwgNCwgMSwgMCwgNSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgOCwgMCwgNCwgNywgMCwgMCwgMywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgNywgMiwgMCwgMCwgMiwgMCwgMywgMCwgMCwgOSwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgNywgMCwgNl07XG4gICAgICAgIHRoaXMuYmxhbmtQZW5NYXJrcyA9IG5ldyBBcnJheSh0aGlzLmdyaWRTaXplKS5maWxsKDApO1xuICAgICAgICB0aGlzLnNhbXBsZVBlbmNpbE1hcmtzID0gW11cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdyaWRTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjZWxsID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDk7IGorKykge1xuICAgICAgICAgICAgICAgIGNlbGwucHVzaCgtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNhbXBsZVBlbmNpbE1hcmtzLnB1c2goY2VsbCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2FtcGxlR3JvdXBzID0gW3tzdW06IDExLCBjZWxsczogWzAsIDksIDEwLCAxOV19LFxuICAgICAgICB7c3VtOiAyNSwgY2VsbHM6IFsxLCAyLCAzLCAxMl19LFxuICAgICAgICB7c3VtOiAxNCwgY2VsbHM6IFs0LCAxM119LFxuICAgICAgICB7c3VtOiA5LCBjZWxsczogWzUsIDZdfSxcbiAgICAgICAge3N1bTogMTIsIGNlbGxzOiBbNywgOF19LFxuICAgICAgICB7c3VtOiAxNSwgY2VsbHM6IFsxMSwgMjBdfSxcbiAgICAgICAge3N1bTogNCwgY2VsbHM6IFsxNCwgMTVdfSxcbiAgICAgICAge3N1bTogMTQsIGNlbGxzOiBbMTYsIDI1XX0sXG4gICAgICAgIHtzdW06IDYsIGNlbGxzOiBbMTcsIDI2XX0sXG4gICAgICAgIHtzdW06IDQwLCBjZWxsczogWzE4LCAyNywgMzYsIDM3LCAzOCwgMzksIDQ1LCA1NF19LFxuICAgICAgICB7c3VtOiAzLCBjZWxsczogWzIxLCAzMF19LFxuICAgICAgICB7c3VtOiAxNSwgY2VsbHM6IFsyMiwgMzFdfSxcbiAgICAgICAge3N1bTogOSwgY2VsbHM6IFsyMywgMjRdfSxcbiAgICAgICAge3N1bTogOCwgY2VsbHM6IFsyOCwgMjldfSxcbiAgICAgICAge3N1bTogMTIsIGNlbGxzOiBbMzIsIDMzXX0sXG4gICAgICAgIHtzdW06IDM4LCBjZWxsczogWzM0LCAzNSwgNDIsIDQzLCA0NCwgNTIsIDUzXX0sXG4gICAgICAgIHtzdW06IDExLCBjZWxsczogWzQwLCA0MV19LFxuICAgICAgICB7c3VtOiAxNSwgY2VsbHM6IFs0NiwgNDddfSxcbiAgICAgICAge3N1bTogMTMsIGNlbGxzOiBbNDgsIDU3XX0sXG4gICAgICAgIHtzdW06IDYsIGNlbGxzOiBbNDksIDU4XX0sXG4gICAgICAgIHtzdW06IDQsIGNlbGxzOiBbNTAsIDUxXX0sXG4gICAgICAgIHtzdW06IDE3LCBjZWxsczogWzU1LCA2MywgNjQsIDcyXX0sXG4gICAgICAgIHtzdW06IDcsIGNlbGxzOiBbNTYsIDY1XX0sXG4gICAgICAgIHtzdW06IDEzLCBjZWxsczogWzU5LCA2MF19LFxuICAgICAgICB7c3VtOiAxMCwgY2VsbHM6IFs2MSwgNzBdfSxcbiAgICAgICAge3N1bTogNiwgY2VsbHM6IFs2MiwgNzFdfSxcbiAgICAgICAge3N1bTogMjYsIGNlbGxzOiBbNjYsIDczLCA3NCwgNzVdfSxcbiAgICAgICAge3N1bTogNCwgY2VsbHM6IFs2NywgNzZdfSxcbiAgICAgICAge3N1bTogMTUsIGNlbGxzOiBbNjgsIDY5XX0sXG4gICAgICAgIHtzdW06IDExLCBjZWxsczogWzc3LCA3OF19LFxuICAgICAgICB7c3VtOiAxMiwgY2VsbHM6IFs3OSwgODBdfV07XG5cblxuICAgICAgICAvLyBFcnJvciBjaGVja2luZ1xuXG4gICAgICAgIHRoaXMucGVuRXJyb3JzID0gWzYsIDAsIDAsIDYsIDAsIDgsIDAsIDAsIDAsIDAsIDYsIDAsIDYsIDAsIDAsIDgsIDAsIDksIDAsIDAsIDEsIDMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDYsIDAsIDAsIDQsIDEsIDAsIDUsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDgsIDAsIDQsIDcsIDAsIDAsIDMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDcsIDIsIDAsIDAsIDIsIDAsIDMsIDAsIDAsIDksIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDcsIDAsIDZdO1xuXG4gICAgICAgIHRoaXMucGVuSW5kZWNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgxOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGVuSW5kZWNlcy5wdXNoKGkpXG4gICAgICAgIH07XG5cblxuICAgIH07XG59O1xuXG4iXSwibmFtZXMiOlsiU2FtcGxlSW5wdXRzIiwiY29uc3RydWN0b3IiLCJncmlkU2l6ZSIsInNhbXBsZVBlbk1hcmtzIiwiYmxhbmtQZW5NYXJrcyIsIkFycmF5IiwiZmlsbCIsInNhbXBsZVBlbmNpbE1hcmtzIiwiaSIsImNlbGwiLCJqIiwicHVzaCIsInNhbXBsZUdyb3VwcyIsInN1bSIsImNlbGxzIiwicGVuRXJyb3JzIiwicGVuSW5kZWNlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/sample_inputs.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;