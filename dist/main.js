/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/canvas_board */ \"./src/scripts/canvas_board.js\");\n/* harmony import */ var _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sample_inputs */ \"./src/scripts/sample_inputs.js\");\n/* harmony import */ var _scripts_game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/game */ \"./src/scripts/game.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const description = document.querySelector(\"#description\");\n  const hideAndShowButton = document.querySelector(\"#hide-button\");\n  hideAndShowButton.addEventListener(\"click\", e => {\n    console.log(e);\n\n    if (description.style.display === 'none') {\n      description.style.display = \"inline-block\";\n    } else {\n      description.style.display = \"none\";\n    }\n\n    ;\n  });\n  const canvas = document.querySelector(\"canvas\");\n  const ctx = canvas.getContext('2d');\n  canvas.height = 600;\n  canvas.width = 600;\n  const sampleInputs = new _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__.SampleInputs();\n  const board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, 600, 600, sampleInputs.sampleGroups);\n  const game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(null);\n  game.penMarks = sampleInputs.penErrors;\n  console.log('error testing: '); // console.log(testGame.getRowErrors())\n  // console.log(testGame.getRowErrors().length)\n\n  let selectedCell = 0;\n  let penMarks = game.penMarks;\n  let pencilMarks = sampleInputs.samplePencilMarks;\n  game.checkErrors();\n  board.update(ctx, selectedCell, penMarks, pencilMarks, game.errors);\n  canvas.addEventListener(\"click\", e => {\n    let y = e.clientY - e.target.getBoundingClientRect().top;\n    let x = e.clientX - e.target.getBoundingClientRect().left;\n    selectedCell = board.getCellNumber(x, y);\n    game.checkErrors();\n    board.update(ctx, selectedCell, penMarks, pencilMarks, game.errors);\n  });\n  document.addEventListener(\"keydown\", e => {\n    if (selectedCell != null) {\n      if (!isNaN(parseInt(e.key))) {\n        if (parseInt(e.key) === penMarks[selectedCell]) {\n          penMarks[selectedCell] = 0;\n        } else {\n          penMarks[selectedCell] = parseInt(e.key);\n        }\n\n        ;\n      } else if (e.key === 'Backspace') {\n        penMarks[selectedCell] = 0;\n\n        for (let i = 0; i < 9; i++) {\n          pencilMarks[selectedCell][i] = -1;\n        }\n      } else if (e.key === 'ArrowLeft') {\n        if (selectedCell % 9 != 0) {\n          selectedCell--;\n        }\n      } else if (e.key === 'ArrowUp') {\n        if (selectedCell > 8) {\n          selectedCell -= 9;\n        }\n\n        ;\n      } else if (e.key === 'ArrowRight') {\n        if (selectedCell % 9 != 8) {\n          selectedCell++;\n        }\n\n        ;\n      } else if (e.key === 'ArrowDown') {\n        if (selectedCell < 72) {\n          selectedCell += 9;\n        }\n\n        ;\n      } else if (['!', '@', '#', '$', '%', '^', '&', '*', '('].includes(e.key)) {\n        const shiftMaps = {\n          ['!']: 1,\n          ['@']: 2,\n          ['#']: 3,\n          ['$']: 4,\n          ['%']: 5,\n          ['^']: 6,\n          ['&']: 7,\n          ['*']: 8,\n          ['(']: 9\n        };\n\n        if (pencilMarks[selectedCell][shiftMaps[e.key] - 1] === -1) {\n          pencilMarks[selectedCell][shiftMaps[e.key] - 1] = shiftMaps[e.key] - 1;\n        } else {\n          pencilMarks[selectedCell][shiftMaps[e.key] - 1] = -1;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    game.checkErrors();\n    board.update(ctx, selectedCell, penMarks, pencilMarks, game.errors);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/canvas_board.js":
/*!*************************************!*\
  !*** ./src/scripts/canvas_board.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasBoard\": function() { return /* binding */ CanvasBoard; }\n/* harmony export */ });\nclass CanvasBoard {\n  constructor(boardSize, gridWidth, gridHeight, sumGroups) {\n    this.boardSize = boardSize;\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.sumGroups = sumGroups;\n    this.sumClues = [];\n    this.walls = [];\n  }\n\n  update(ctx, selectedCell, penMarks, pencilMarks, errors) {\n    this.drawBackground(ctx);\n\n    if (selectedCell != null) {\n      this.highlightSelectedCell(ctx, selectedCell);\n    }\n\n    ;\n    this.drawSumsOvelay(ctx);\n    this.drawSumClues(ctx, selectedCell);\n    this.drawGridLines(ctx);\n    this.drawPenMarks(ctx, penMarks, errors);\n    this.drawPencilMarks(ctx, penMarks, pencilMarks);\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.gridWidth, this.gridHeight);\n  }\n\n  drawGridLines(ctx) {\n    ctx.beginPath();\n    ctx.rect(0, 0, this.gridWidth, this.gridHeight);\n    ctx.setLineDash([]);\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 8;\n    ctx.stroke();\n\n    for (let i = 0; i < this.boardSize; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.gridHeight / this.boardSize * i);\n      ctx.lineTo(this.gridWidth, this.gridHeight / this.boardSize * i);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(this.gridWidth / this.boardSize * i, 0);\n      ctx.lineTo(this.gridWidth / this.boardSize * i, this.gridHeight);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n    }\n\n    ;\n  }\n\n  drawPenMarks(ctx, penMarkings, errors) {\n    console.log('in draw pen parks, errors; ', errors);\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] != 0) {\n          ctx.font = '30px serif';\n          ctx.fillStyle = 'black';\n\n          if (errors[currIndex]) {\n            ctx.fillStyle = 'rgb(189, 17, 17)';\n          }\n\n          ctx.fillText(`${penMarkings[currIndex]}`, this.gridWidth / 9 * j + 25, this.gridHeight / 9 * i + 45);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawPencilMarks(ctx, penMarkings, pencilMarkings) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] === 0) {\n          let pencilIndex = 0;\n\n          for (let c = 0; c < 3; c++) {\n            for (let r = 0; r < 3; r++) {\n              if (pencilMarkings[currIndex][pencilIndex] != -1) {\n                ctx.font = '15px serif';\n                ctx.fillStyle = \"black\";\n                ctx.fillText(`${pencilMarkings[currIndex][pencilIndex] + 1}`, this.gridWidth / 9 * j + r * 20 + 10, this.gridHeight / 9 * i + c * 20 + 20);\n              }\n\n              ;\n              pencilIndex++;\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  highlightSelectedCell(ctx, cellNumber) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (currIndex === cellNumber) {\n          ctx.rect(this.gridHeight / 9 * j, this.gridWidth / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n          ctx.fillStyle = \"#d9d3c9\";\n          ctx.fill();\n        } else if (currIndex > cellNumber) {\n          break;\n        }\n\n        ;\n        currIndex++;\n      }\n    }\n  }\n\n  getCellNumber(x, y) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.gridHeight / this.boardSize * j < x && x < this.gridHeight / this.boardSize * j + this.gridHeight / this.boardSize) {\n          if (this.gridWidth / this.boardSize * i < y && y < this.gridWidth / this.boardSize * i + this.gridWidth / this.boardSize) {\n            return currIndex;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getAdjacentCells(index) {\n    let north = index - this.boardSize;\n    let east = index + 1;\n    let south = index + this.boardSize;\n    let west = index - 1;\n    const adjacent = {\n      n: north,\n      e: east,\n      s: south,\n      w: west\n    };\n    return adjacent;\n  }\n\n  getWalls() {\n    const walls = [];\n\n    for (let i = 0; i < this.boardSize ** 2; i++) {\n      walls.push({\n        n: false,\n        e: false,\n        s: false,\n        w: false\n      });\n    } // const walls = new Array(81).fill().map((x) => ({n: false, e: false, s: false, w: false});\n\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        const adjacentInclude = dir => {\n          return !this.sumGroups[i].cells.includes(dir);\n        };\n\n        let adjacentCells = this.getAdjacentCells(this.sumGroups[i].cells[j]);\n\n        if (adjacentInclude(adjacentCells.n)) {\n          walls[this.sumGroups[i].cells[j]].n = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.e)) {\n          walls[this.sumGroups[i].cells[j]].e = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.s)) {\n          walls[this.sumGroups[i].cells[j]].s = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.w)) {\n          walls[this.sumGroups[i].cells[j]].w = true;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return walls;\n  }\n\n  drawSumsOvelay(ctx) {\n    if (this.walls.length === 0) {\n      this.walls = this.getWalls();\n    }\n\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.walls[currIndex].n) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridWidth / 9 * i + 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].e) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].s) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + (this.gridHeight / 9 - 7));\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].w) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawSumClues(ctx, selectedCell) {\n    if (this.sumClues.length === 0) {\n      this.sumClues = new Array(81).fill(0);\n\n      for (let i = 0; i < this.sumGroups.length; i++) {\n        this.sumClues[this.sumGroups[i].cells[0]] = this.sumGroups[i].sum;\n      }\n\n      ;\n    }\n\n    ;\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.sumClues[currIndex] != 0) {\n          if (selectedCell != null && currIndex === selectedCell) {\n            ctx.fillStyle = '#d9d3c9';\n          } else {\n            ctx.fillStyle = 'white';\n          }\n\n          ;\n          ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, 17, 17);\n          ctx.font = '10px serif';\n          ctx.fillStyle = 'rgb(189, 17, 17)';\n          ctx.fillText(`${this.sumClues[currIndex]}`, this.gridWidth / 9 * j + 5, this.gridHeight / 9 * i + 15);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/canvas_board.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": function() { return /* binding */ Game; }\n/* harmony export */ });\nclass Game {\n  constructor(sumGroups) {\n    let gridSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 81;\n    this.gridSize = gridSize;\n    this.penMarks = new Array(gridSize).fill(0);\n    this.pencilMarks = new Array(gridSize).fill(-1);\n    this.errors = new Array(gridSize).fill(false);\n    this.sumGroups = sumGroups;\n  }\n\n  checkErrors() {\n    this.errors = this.getRowErrors();\n  }\n\n  checkGroup(group) {\n    let counts = {};\n    let seen = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (seen.includes(group[i])) {\n        counts[group[i]] += 1;\n      } else {\n        seen.push(group[i]);\n        counts[group[i]] = 1;\n      }\n\n      ;\n    }\n\n    ;\n    let groupErrors = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (counts[group[i]] > 1) {\n        groupErrors.push(true);\n      } else {\n        groupErrors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n    return groupErrors;\n  }\n\n  getRowErrors() {\n    let rowErrors = [];\n    let currIndex = 0;\n\n    for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n      let row = [];\n\n      for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n        row.push(this.penMarks[currIndex]);\n        currIndex++;\n      }\n\n      ;\n      let currRowErrors = this.checkGroup(row);\n\n      for (let j = 0; j < currRowErrors.length; j++) {\n        rowErrors.push(currRowErrors[j]);\n      }\n    }\n\n    ;\n    return rowErrors;\n  }\n\n  getColumnErrors() {\n    let currIndex = 0;\n    let colErrors = [];\n    let col = [];\n\n    for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n      for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n        if (j % Math.sqrt(this.gridSize) === 0) {\n          colErrors.concat(this.checkGroup(col));\n          col = [];\n        }\n\n        ;\n        col.push(this.penMarks[currIndex]);\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n    let transposedColErrors = new Array(this.gridSize).fill(0);\n    indexA = 0;\n    indexB = 0;\n\n    for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n      for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n        indexA++;\n      }\n    }\n\n    return transposedColErrors;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBSyxJQUFJVSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxJQUFJLENBQUNDLElBQUwsQ0FBVSxLQUFLcEIsUUFBZixDQUFwQixFQUE4Q3NCLENBQUMsRUFBL0MsRUFBbUQ7UUFDL0NPLE1BQU07TUFDVDtJQUVKOztJQUNELE9BQU9ELG1CQUFQO0VBQ0g7O0FBMUZhO0FBMkZqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2pzX3Byb2plY3QvLi9zcmMvc2NyaXB0cy9nYW1lLmpzP2NkYzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEdhbWUge1xuICAgIGNvbnN0cnVjdG9yKHN1bUdyb3VwcywgZ3JpZFNpemU9ODEpIHtcbiAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IGdyaWRTaXplO1xuICAgICAgICB0aGlzLnBlbk1hcmtzID0gbmV3IEFycmF5KGdyaWRTaXplKS5maWxsKDApO1xuICAgICAgICB0aGlzLnBlbmNpbE1hcmtzID0gbmV3IEFycmF5KGdyaWRTaXplKS5maWxsKC0xKTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBuZXcgQXJyYXkoZ3JpZFNpemUpLmZpbGwoZmFsc2UpO1xuICAgICAgICB0aGlzLnN1bUdyb3VwcyA9IHN1bUdyb3VwcztcbiAgICB9O1xuXG4gICAgY2hlY2tFcnJvcnMoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5nZXRSb3dFcnJvcnMoKTtcbiAgICB9XG5cbiAgICBjaGVja0dyb3VwKGdyb3VwKSB7XG4gICAgICAgIGxldCBjb3VudHMgPSB7fTtcbiAgICAgICAgbGV0IHNlZW4gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc2Vlbi5pbmNsdWRlcyhncm91cFtpXSkpIHtcbiAgICAgICAgICAgICAgICBjb3VudHNbZ3JvdXBbaV1dICs9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlZW4ucHVzaChncm91cFtpXSk7XG4gICAgICAgICAgICAgICAgY291bnRzW2dyb3VwW2ldXSA9IDE7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBncm91cEVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY291bnRzW2dyb3VwW2ldXSA+IDEpIHtcbiAgICAgICAgICAgICAgICBncm91cEVycm9ycy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBncm91cEVycm9ycy5wdXNoKGZhbHNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cblxuICAgICAgICByZXR1cm4gZ3JvdXBFcnJvcnM7XG4gICAgfTtcblxuICAgIGdldFJvd0Vycm9ycygpIHtcbiAgICAgICAgbGV0IHJvd0Vycm9ycyA9IFtdO1xuXG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguc3FydCh0aGlzLmdyaWRTaXplKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IE1hdGguc3FydCh0aGlzLmdyaWRTaXplKTsgaisrKSB7XG4gICAgICAgICAgICAgICAgcm93LnB1c2godGhpcy5wZW5NYXJrc1tjdXJySW5kZXhdKTtcbiAgICAgICAgICAgICAgICBjdXJySW5kZXgrKztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBjdXJyUm93RXJyb3JzID0gdGhpcy5jaGVja0dyb3VwKHJvdyk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN1cnJSb3dFcnJvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICByb3dFcnJvcnMucHVzaChjdXJyUm93RXJyb3JzW2pdKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiByb3dFcnJvcnM7XG4gICAgfTtcblxuICAgIFxuXG5cbiAgICBnZXRDb2x1bW5FcnJvcnMoKSB7XG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgICAgICBsZXQgY29sRXJyb3JzID0gW107XG4gICAgICAgIGxldCBjb2wgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguc3FydCh0aGlzLmdyaWRTaXplKTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IE1hdGguc3FydCh0aGlzLmdyaWRTaXplKTsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGogJSBNYXRoLnNxcnQodGhpcy5ncmlkU2l6ZSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29sRXJyb3JzLmNvbmNhdCh0aGlzLmNoZWNrR3JvdXAoY29sKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IFtdO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb2wucHVzaCh0aGlzLnBlbk1hcmtzW2N1cnJJbmRleF0pO1xuICAgICAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgdHJhbnNwb3NlZENvbEVycm9ycyA9IG5ldyBBcnJheSh0aGlzLmdyaWRTaXplKS5maWxsKDApO1xuXG4gICAgICAgIGluZGV4QSA9IDA7XG4gICAgICAgIGluZGV4QiA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5zcXJ0KHRoaXMuZ3JpZFNpemUpOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgTWF0aC5zcXJ0KHRoaXMuZ3JpZFNpemUpOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpbmRleEErKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc3Bvc2VkQ29sRXJyb3JzO1xuICAgIH07XG59O1xuXG4iXSwibmFtZXMiOlsiR2FtZSIsImNvbnN0cnVjdG9yIiwic3VtR3JvdXBzIiwiZ3JpZFNpemUiLCJwZW5NYXJrcyIsIkFycmF5IiwiZmlsbCIsInBlbmNpbE1hcmtzIiwiZXJyb3JzIiwiY2hlY2tFcnJvcnMiLCJnZXRSb3dFcnJvcnMiLCJjaGVja0dyb3VwIiwiZ3JvdXAiLCJjb3VudHMiLCJzZWVuIiwiaSIsImxlbmd0aCIsImluY2x1ZGVzIiwicHVzaCIsImdyb3VwRXJyb3JzIiwicm93RXJyb3JzIiwiY3VyckluZGV4IiwiTWF0aCIsInNxcnQiLCJyb3ciLCJqIiwiY3VyclJvd0Vycm9ycyIsImdldENvbHVtbkVycm9ycyIsImNvbEVycm9ycyIsImNvbCIsImNvbmNhdCIsInRyYW5zcG9zZWRDb2xFcnJvcnMiLCJpbmRleEEiLCJpbmRleEIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/sample_inputs.js":
/*!**************************************!*\
  !*** ./src/scripts/sample_inputs.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SampleInputs\": function() { return /* binding */ SampleInputs; }\n/* harmony export */ });\nclass SampleInputs {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 81;\n    this.gridSize = gridSize;\n    this.samplePenMarks = [6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.blankPenMarks = new Array(this.gridSize).fill(0);\n    this.samplePencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      let cell = [];\n\n      for (let j = 0; j < 9; j++) {\n        cell.push(-1);\n      }\n\n      this.samplePencilMarks.push(cell);\n    }\n\n    ;\n    this.sampleGroups = [{\n      sum: 11,\n      cells: [0, 9, 10, 19]\n    }, {\n      sum: 25,\n      cells: [1, 2, 3, 12]\n    }, {\n      sum: 14,\n      cells: [4, 13]\n    }, {\n      sum: 9,\n      cells: [5, 6]\n    }, {\n      sum: 12,\n      cells: [7, 8]\n    }, {\n      sum: 15,\n      cells: [11, 20]\n    }, {\n      sum: 4,\n      cells: [14, 15]\n    }, {\n      sum: 14,\n      cells: [16, 25]\n    }, {\n      sum: 6,\n      cells: [17, 26]\n    }, {\n      sum: 40,\n      cells: [18, 27, 36, 37, 38, 39, 45, 54]\n    }, {\n      sum: 3,\n      cells: [21, 30]\n    }, {\n      sum: 15,\n      cells: [22, 31]\n    }, {\n      sum: 9,\n      cells: [23, 24]\n    }, {\n      sum: 8,\n      cells: [28, 29]\n    }, {\n      sum: 12,\n      cells: [32, 33]\n    }, {\n      sum: 38,\n      cells: [34, 35, 42, 43, 44, 52, 53]\n    }, {\n      sum: 11,\n      cells: [40, 41]\n    }, {\n      sum: 15,\n      cells: [46, 47]\n    }, {\n      sum: 13,\n      cells: [48, 57]\n    }, {\n      sum: 6,\n      cells: [49, 58]\n    }, {\n      sum: 4,\n      cells: [50, 51]\n    }, {\n      sum: 17,\n      cells: [55, 63, 64, 72]\n    }, {\n      sum: 7,\n      cells: [56, 65]\n    }, {\n      sum: 13,\n      cells: [59, 60]\n    }, {\n      sum: 10,\n      cells: [61, 70]\n    }, {\n      sum: 6,\n      cells: [62, 71]\n    }, {\n      sum: 26,\n      cells: [66, 73, 74, 75]\n    }, {\n      sum: 4,\n      cells: [67, 76]\n    }, {\n      sum: 15,\n      cells: [68, 69]\n    }, {\n      sum: 11,\n      cells: [77, 78]\n    }, {\n      sum: 12,\n      cells: [79, 80]\n    }]; // Error checking\n\n    this.penErrors = [6, 0, 0, 6, 0, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/sample_inputs.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;