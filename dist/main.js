/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/canvas_board */ \"./src/scripts/canvas_board.js\");\n/* harmony import */ var _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sample_inputs */ \"./src/scripts/sample_inputs.js\");\n/* harmony import */ var _scripts_game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/game */ \"./src/scripts/game.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const description = document.querySelector(\"#description\");\n  const hideAndShowButton = document.querySelector(\"#hide-button\");\n  hideAndShowButton.addEventListener(\"click\", e => {\n    console.log(e);\n\n    if (description.style.display === 'none') {\n      description.style.display = \"inline-block\";\n      hideAndShowButton.innerText = \"Hide\";\n    } else {\n      description.style.display = \"none\";\n      hideAndShowButton.innerText = \"Show\";\n    }\n\n    ;\n  });\n  const canvas = document.querySelector(\"canvas\");\n  const ctx = canvas.getContext('2d');\n  canvas.height = 600;\n  canvas.width = 600;\n  const sampleInputs = new _scripts_sample_inputs__WEBPACK_IMPORTED_MODULE_1__.SampleInputs();\n  const board = new _scripts_canvas_board__WEBPACK_IMPORTED_MODULE_0__.CanvasBoard(9, 600, 600, sampleInputs.sampleGroups);\n  const game = new _scripts_game__WEBPACK_IMPORTED_MODULE_2__.Game(sampleInputs.sampleGroups);\n  const resetButton = document.querySelector(\"#reset-button\");\n  resetButton.addEventListener(\"click\", () => {\n    game.penMarks = sampleInputs.blankPenMarks;\n    game.pencilMarks = sampleInputs.samplePencilMarks;\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, game.pencilMarks, game.errors);\n  });\n  let selectedCell = 0;\n  let pencilMarks = sampleInputs.samplePencilMarks;\n  game.getMaps();\n  game.penMarks = game.colMaps;\n  game.checkErrors();\n  board.update(ctx, selectedCell, game.penMarks, pencilMarks, game.errors);\n  canvas.addEventListener(\"click\", e => {\n    let y = e.clientY - e.target.getBoundingClientRect().top;\n    let x = e.clientX - e.target.getBoundingClientRect().left;\n    selectedCell = board.getCellNumber(x, y);\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, pencilMarks, game.errors);\n  });\n  document.addEventListener(\"keydown\", e => {\n    if (selectedCell != null) {\n      if (!isNaN(parseInt(e.key))) {\n        if (parseInt(e.key) === game.penMarks[selectedCell]) {\n          game.penMarks[selectedCell] = 0;\n        } else {\n          game.penMarks[selectedCell] = parseInt(e.key);\n        }\n\n        ;\n      } else if (e.key === 'Backspace') {\n        game.penMarks[selectedCell] = 0;\n\n        for (let i = 0; i < 9; i++) {\n          pencilMarks[selectedCell][i] = -1;\n        }\n      } else if (e.key === 'ArrowLeft') {\n        if (selectedCell % 9 != 0) {\n          selectedCell--;\n        }\n      } else if (e.key === 'ArrowUp') {\n        if (selectedCell > 8) {\n          selectedCell -= 9;\n        }\n\n        ;\n      } else if (e.key === 'ArrowRight') {\n        if (selectedCell % 9 != 8) {\n          selectedCell++;\n        }\n\n        ;\n      } else if (e.key === 'ArrowDown') {\n        if (selectedCell < 72) {\n          selectedCell += 9;\n        }\n\n        ;\n      } else if (['!', '@', '#', '$', '%', '^', '&', '*', '('].includes(e.key)) {\n        const shiftMaps = {\n          ['!']: 1,\n          ['@']: 2,\n          ['#']: 3,\n          ['$']: 4,\n          ['%']: 5,\n          ['^']: 6,\n          ['&']: 7,\n          ['*']: 8,\n          ['(']: 9\n        };\n\n        if (pencilMarks[selectedCell][shiftMaps[e.key] - 1] === -1) {\n          pencilMarks[selectedCell][shiftMaps[e.key] - 1] = shiftMaps[e.key] - 1;\n        } else {\n          pencilMarks[selectedCell][shiftMaps[e.key] - 1] = -1;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    game.checkErrors();\n    board.update(ctx, selectedCell, game.penMarks, pencilMarks, game.errors);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/canvas_board.js":
/*!*************************************!*\
  !*** ./src/scripts/canvas_board.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasBoard\": function() { return /* binding */ CanvasBoard; }\n/* harmony export */ });\nclass CanvasBoard {\n  constructor(boardSize, gridWidth, gridHeight, sumGroups) {\n    this.boardSize = boardSize;\n    this.gridWidth = gridWidth;\n    this.gridHeight = gridHeight;\n    this.sumGroups = sumGroups;\n    this.sumClues = [];\n    this.walls = [];\n  }\n\n  update(ctx, selectedCell, penMarks, pencilMarks, errors) {\n    this.drawBackground(ctx);\n\n    if (selectedCell != null) {\n      this.highlightSelectedCell(ctx, selectedCell);\n    }\n\n    ;\n    this.drawSumsOvelay(ctx);\n    this.drawSumClues(ctx, selectedCell);\n    this.drawGridLines(ctx);\n    this.drawPenMarks(ctx, penMarks, errors);\n    this.drawPencilMarks(ctx, penMarks, pencilMarks);\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.gridWidth, this.gridHeight);\n  }\n\n  drawGridLines(ctx) {\n    ctx.beginPath();\n    ctx.rect(0, 0, this.gridWidth, this.gridHeight);\n    ctx.setLineDash([]);\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 8;\n    ctx.stroke();\n\n    for (let i = 0; i < this.boardSize; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.gridHeight / this.boardSize * i);\n      ctx.lineTo(this.gridWidth, this.gridHeight / this.boardSize * i);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(this.gridWidth / this.boardSize * i, 0);\n      ctx.lineTo(this.gridWidth / this.boardSize * i, this.gridHeight);\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n\n      if (i % 3 === 0) {\n        ctx.lineWidth = 4;\n      }\n\n      ;\n      ctx.stroke();\n    }\n\n    ;\n  }\n\n  drawPenMarks(ctx, penMarkings, errors) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] != 0) {\n          ctx.font = '30px serif';\n          ctx.fillStyle = 'black';\n\n          if (errors[currIndex]) {\n            ctx.fillStyle = 'rgb(189, 17, 17)';\n          }\n\n          ctx.fillText(`${penMarkings[currIndex]}`, this.gridWidth / 9 * j + 25, this.gridHeight / 9 * i + 45);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawPencilMarks(ctx, penMarkings, pencilMarkings) {\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (penMarkings[currIndex] === 0) {\n          let pencilIndex = 0;\n\n          for (let c = 0; c < 3; c++) {\n            for (let r = 0; r < 3; r++) {\n              if (pencilMarkings[currIndex][pencilIndex] != -1) {\n                ctx.font = '15px serif';\n                ctx.fillStyle = \"black\";\n                ctx.fillText(`${pencilMarkings[currIndex][pencilIndex] + 1}`, this.gridWidth / 9 * j + r * 20 + 10, this.gridHeight / 9 * i + c * 20 + 20);\n              }\n\n              ;\n              pencilIndex++;\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  highlightSelectedCell(ctx, cellNumber) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (currIndex === cellNumber) {\n          ctx.rect(this.gridHeight / 9 * j, this.gridWidth / 9 * i, this.gridHeight / 9, this.gridWidth / 9);\n          ctx.fillStyle = \"#d9d3c9\";\n          ctx.fill();\n        } else if (currIndex > cellNumber) {\n          break;\n        }\n\n        ;\n        currIndex++;\n      }\n    }\n  }\n\n  getCellNumber(x, y) {\n    let currIndex = 0;\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        if (this.gridHeight / this.boardSize * j < x && x < this.gridHeight / this.boardSize * j + this.gridHeight / this.boardSize) {\n          if (this.gridWidth / this.boardSize * i < y && y < this.gridWidth / this.boardSize * i + this.gridWidth / this.boardSize) {\n            return currIndex;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  getAdjacentCells(index) {\n    let north = index - this.boardSize;\n    let east = index + 1;\n    let south = index + this.boardSize;\n    let west = index - 1;\n    const adjacent = {\n      n: north,\n      e: east,\n      s: south,\n      w: west\n    };\n    return adjacent;\n  }\n\n  getWalls() {\n    const walls = [];\n\n    for (let i = 0; i < this.boardSize ** 2; i++) {\n      walls.push({\n        n: false,\n        e: false,\n        s: false,\n        w: false\n      });\n    } // const walls = new Array(81).fill().map((x) => ({n: false, e: false, s: false, w: false});\n\n\n    for (let i = 0; i < this.sumGroups.length; i++) {\n      for (let j = 0; j < this.sumGroups[i].cells.length; j++) {\n        const adjacentInclude = dir => {\n          return !this.sumGroups[i].cells.includes(dir);\n        };\n\n        let adjacentCells = this.getAdjacentCells(this.sumGroups[i].cells[j]);\n\n        if (adjacentInclude(adjacentCells.n)) {\n          walls[this.sumGroups[i].cells[j]].n = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.e)) {\n          walls[this.sumGroups[i].cells[j]].e = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.s)) {\n          walls[this.sumGroups[i].cells[j]].s = true;\n        }\n\n        ;\n\n        if (adjacentInclude(adjacentCells.w)) {\n          walls[this.sumGroups[i].cells[j]].w = true;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return walls;\n  }\n\n  drawSumsOvelay(ctx) {\n    if (this.walls.length === 0) {\n      this.walls = this.getWalls();\n    }\n\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.walls[currIndex].n) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridWidth / 9 * i + 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].e) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].s) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + (this.gridHeight / 9 - 7));\n          ctx.lineTo(this.gridWidth / 9 * j + this.gridWidth / 9 - 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n\n        if (this.walls[currIndex].w) {\n          ctx.beginPath();\n          ctx.setLineDash([5, 5]);\n          ctx.strokeStyle = 'grey';\n          ctx.moveTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + 7);\n          ctx.lineTo(this.gridWidth / 9 * j + 7, this.gridHeight / 9 * i + this.gridHeight / 9 - 7);\n          ctx.stroke();\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  drawSumClues(ctx, selectedCell) {\n    if (this.sumClues.length === 0) {\n      this.sumClues = new Array(81).fill(0);\n\n      for (let i = 0; i < this.sumGroups.length; i++) {\n        this.sumClues[this.sumGroups[i].cells[0]] = this.sumGroups[i].sum;\n      }\n\n      ;\n    }\n\n    ;\n    let currIndex = 0;\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.sumClues[currIndex] != 0) {\n          if (selectedCell != null && currIndex === selectedCell) {\n            ctx.fillStyle = '#d9d3c9';\n          } else {\n            ctx.fillStyle = 'white';\n          }\n\n          ;\n          ctx.fillRect(this.gridWidth / 9 * j, this.gridHeight / 9 * i, 17, 17);\n          ctx.font = '10px serif';\n          ctx.fillStyle = 'rgb(189, 17, 17)';\n          ctx.fillText(`${this.sumClues[currIndex]}`, this.gridWidth / 9 * j + 5, this.gridHeight / 9 * i + 15);\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9jYW52YXNfYm9hcmQuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFdBQU4sQ0FBa0I7RUFDckJDLFdBQVcsQ0FBQ0MsU0FBRCxFQUFZQyxTQUFaLEVBQXVCQyxVQUF2QixFQUFtQ0MsU0FBbkMsRUFBOEM7SUFDckQsS0FBS0gsU0FBTCxHQUFpQkEsU0FBakI7SUFDQSxLQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtJQUNBLEtBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0lBQ0EsS0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7SUFDQSxLQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0lBQ0EsS0FBS0MsS0FBTCxHQUFhLEVBQWI7RUFDSDs7RUFFREMsTUFBTSxDQUFDQyxHQUFELEVBQU1DLFlBQU4sRUFBb0JDLFFBQXBCLEVBQThCQyxXQUE5QixFQUEyQ0MsTUFBM0MsRUFBbUQ7SUFDckQsS0FBS0MsY0FBTCxDQUFvQkwsR0FBcEI7O0lBQ0EsSUFBSUMsWUFBWSxJQUFJLElBQXBCLEVBQTBCO01BQ3RCLEtBQUtLLHFCQUFMLENBQTJCTixHQUEzQixFQUFnQ0MsWUFBaEM7SUFDSDs7SUFBQTtJQUNELEtBQUtNLGNBQUwsQ0FBb0JQLEdBQXBCO0lBQ0EsS0FBS1EsWUFBTCxDQUFrQlIsR0FBbEIsRUFBdUJDLFlBQXZCO0lBQ0EsS0FBS1EsYUFBTCxDQUFtQlQsR0FBbkI7SUFDQSxLQUFLVSxZQUFMLENBQWtCVixHQUFsQixFQUF1QkUsUUFBdkIsRUFBaUNFLE1BQWpDO0lBQ0EsS0FBS08sZUFBTCxDQUFxQlgsR0FBckIsRUFBMEJFLFFBQTFCLEVBQW9DQyxXQUFwQztFQUNIOztFQUVERSxjQUFjLENBQUNMLEdBQUQsRUFBTTtJQUNoQkEsR0FBRyxDQUFDWSxTQUFKLEdBQWdCLE9BQWhCO0lBQ0FaLEdBQUcsQ0FBQ2EsUUFBSixDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsS0FBS25CLFNBQXhCLEVBQW1DLEtBQUtDLFVBQXhDO0VBQ0g7O0VBRURjLGFBQWEsQ0FBQ1QsR0FBRCxFQUFNO0lBQ2ZBLEdBQUcsQ0FBQ2MsU0FBSjtJQUNBZCxHQUFHLENBQUNlLElBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLEtBQUtyQixTQUFwQixFQUErQixLQUFLQyxVQUFwQztJQUNBSyxHQUFHLENBQUNnQixXQUFKLENBQWdCLEVBQWhCO0lBQ0FoQixHQUFHLENBQUNpQixXQUFKLEdBQWtCLE9BQWxCO0lBQ0FqQixHQUFHLENBQUNrQixTQUFKLEdBQWdCLENBQWhCO0lBQ0FsQixHQUFHLENBQUNtQixNQUFKOztJQUVBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLM0IsU0FBekIsRUFBb0MyQixDQUFDLEVBQXJDLEVBQXlDO01BQ3JDcEIsR0FBRyxDQUFDYyxTQUFKO01BQ0FkLEdBQUcsQ0FBQ3FCLE1BQUosQ0FBVyxDQUFYLEVBQWUsS0FBSzFCLFVBQUwsR0FBa0IsS0FBS0YsU0FBeEIsR0FBcUMyQixDQUFuRDtNQUNBcEIsR0FBRyxDQUFDc0IsTUFBSixDQUFXLEtBQUs1QixTQUFoQixFQUE0QixLQUFLQyxVQUFMLEdBQWtCLEtBQUtGLFNBQXhCLEdBQXFDMkIsQ0FBaEU7TUFDQXBCLEdBQUcsQ0FBQ2lCLFdBQUosR0FBa0IsT0FBbEI7TUFDQWpCLEdBQUcsQ0FBQ2tCLFNBQUosR0FBZ0IsQ0FBaEI7O01BQ0EsSUFBSUUsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUFkLEVBQWlCO1FBQUVwQixHQUFHLENBQUNrQixTQUFKLEdBQWdCLENBQWhCO01BQW1COztNQUFBO01BQ3RDbEIsR0FBRyxDQUFDbUIsTUFBSjtNQUVBbkIsR0FBRyxDQUFDYyxTQUFKO01BQ0FkLEdBQUcsQ0FBQ3FCLE1BQUosQ0FBWSxLQUFLM0IsU0FBTCxHQUFpQixLQUFLRCxTQUF2QixHQUFvQzJCLENBQS9DLEVBQWtELENBQWxEO01BQ0FwQixHQUFHLENBQUNzQixNQUFKLENBQVksS0FBSzVCLFNBQUwsR0FBaUIsS0FBS0QsU0FBdkIsR0FBb0MyQixDQUEvQyxFQUFrRCxLQUFLekIsVUFBdkQ7TUFDQUssR0FBRyxDQUFDaUIsV0FBSixHQUFrQixPQUFsQjtNQUNBakIsR0FBRyxDQUFDa0IsU0FBSixHQUFnQixDQUFoQjs7TUFDQSxJQUFJRSxDQUFDLEdBQUcsQ0FBSixLQUFVLENBQWQsRUFBaUI7UUFBRXBCLEdBQUcsQ0FBQ2tCLFNBQUosR0FBZ0IsQ0FBaEI7TUFBbUI7O01BQUE7TUFDdENsQixHQUFHLENBQUNtQixNQUFKO0lBQ0g7O0lBQUE7RUFDSjs7RUFFRFQsWUFBWSxDQUFDVixHQUFELEVBQU11QixXQUFOLEVBQW1CbkIsTUFBbkIsRUFBMkI7SUFDbkMsSUFBSW9CLFNBQVMsR0FBRyxDQUFoQjs7SUFFQSxLQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7TUFDeEIsS0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLEVBQXhCLEVBQTRCO1FBQ3hCLElBQUlGLFdBQVcsQ0FBQ0MsU0FBRCxDQUFYLElBQTBCLENBQTlCLEVBQWlDO1VBQzdCeEIsR0FBRyxDQUFDMEIsSUFBSixHQUFXLFlBQVg7VUFDQTFCLEdBQUcsQ0FBQ1ksU0FBSixHQUFnQixPQUFoQjs7VUFDQSxJQUFJUixNQUFNLENBQUNvQixTQUFELENBQVYsRUFBdUI7WUFDbkJ4QixHQUFHLENBQUNZLFNBQUosR0FBZ0Isa0JBQWhCO1VBQ0g7O1VBQ0RaLEdBQUcsQ0FBQzJCLFFBQUosQ0FBYyxHQUFFSixXQUFXLENBQUNDLFNBQUQsQ0FBWSxFQUF2QyxFQUEyQyxLQUFLOUIsU0FBTCxHQUFpQixDQUFsQixHQUF1QitCLENBQXZCLEdBQTJCLEVBQXJFLEVBQTBFLEtBQUs5QixVQUFMLEdBQWtCLENBQW5CLEdBQXdCeUIsQ0FBeEIsR0FBNEIsRUFBckc7UUFDSDs7UUFBQTtRQUNESSxTQUFTO01BQ1o7O01BQUE7SUFDSjs7SUFBQTtFQUNKOztFQUVEYixlQUFlLENBQUNYLEdBQUQsRUFBTXVCLFdBQU4sRUFBbUJLLGNBQW5CLEVBQW1DO0lBQzlDLElBQUlKLFNBQVMsR0FBRyxDQUFoQjs7SUFFQSxLQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7TUFDeEIsS0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLEVBQXhCLEVBQTRCO1FBQ3hCLElBQUlGLFdBQVcsQ0FBQ0MsU0FBRCxDQUFYLEtBQTJCLENBQS9CLEVBQWtDO1VBQzlCLElBQUlLLFdBQVcsR0FBRyxDQUFsQjs7VUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7WUFDeEIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLEVBQXhCLEVBQTRCO2NBQ3hCLElBQUlILGNBQWMsQ0FBQ0osU0FBRCxDQUFkLENBQTBCSyxXQUExQixLQUEwQyxDQUFDLENBQS9DLEVBQWtEO2dCQUM5QzdCLEdBQUcsQ0FBQzBCLElBQUosR0FBVyxZQUFYO2dCQUNBMUIsR0FBRyxDQUFDWSxTQUFKLEdBQWdCLE9BQWhCO2dCQUNBWixHQUFHLENBQUMyQixRQUFKLENBQWMsR0FBRUMsY0FBYyxDQUFDSixTQUFELENBQWQsQ0FBMEJLLFdBQTFCLElBQXlDLENBQUUsRUFBM0QsRUFBK0QsS0FBS25DLFNBQUwsR0FBaUIsQ0FBbEIsR0FBdUIrQixDQUF2QixHQUE0Qk0sQ0FBQyxHQUFHLEVBQWhDLEdBQXNDLEVBQXBHLEVBQXlHLEtBQUtwQyxVQUFMLEdBQWtCLENBQW5CLEdBQXdCeUIsQ0FBeEIsR0FBNkJVLENBQUMsR0FBRyxFQUFqQyxHQUF1QyxFQUEvSTtjQUNIOztjQUFBO2NBQ0RELFdBQVc7WUFDZDs7WUFBQTtVQUNKOztVQUFBO1FBQ0o7O1FBQUE7UUFDREwsU0FBUztNQUNaOztNQUFBO0lBQ0o7O0lBQUE7RUFDSjs7RUFFRGxCLHFCQUFxQixDQUFDTixHQUFELEVBQU1nQyxVQUFOLEVBQWtCO0lBQ25DLElBQUlSLFNBQVMsR0FBRyxDQUFoQjs7SUFFQSxLQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBSzNCLFNBQXpCLEVBQW9DMkIsQ0FBQyxFQUFyQyxFQUF5QztNQUNyQyxLQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS2hDLFNBQXpCLEVBQW9DZ0MsQ0FBQyxFQUFyQyxFQUF5QztRQUNyQyxJQUFJRCxTQUFTLEtBQUtRLFVBQWxCLEVBQThCO1VBQzFCaEMsR0FBRyxDQUFDZSxJQUFKLENBQVMsS0FBS3BCLFVBQUwsR0FBa0IsQ0FBbEIsR0FBc0I4QixDQUEvQixFQUFrQyxLQUFLL0IsU0FBTCxHQUFpQixDQUFqQixHQUFxQjBCLENBQXZELEVBQTBELEtBQUt6QixVQUFMLEdBQWtCLENBQTVFLEVBQStFLEtBQUtELFNBQUwsR0FBaUIsQ0FBaEc7VUFDQU0sR0FBRyxDQUFDWSxTQUFKLEdBQWdCLFNBQWhCO1VBQ0FaLEdBQUcsQ0FBQ2lDLElBQUo7UUFDSCxDQUpELE1BSU8sSUFBSVQsU0FBUyxHQUFHUSxVQUFoQixFQUE0QjtVQUMvQjtRQUNIOztRQUFBO1FBRURSLFNBQVM7TUFDWjtJQUNKO0VBQ0o7O0VBRURVLGFBQWEsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQU87SUFDaEIsSUFBSVosU0FBUyxHQUFHLENBQWhCOztJQUNBLEtBQUssSUFBSUosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLM0IsU0FBekIsRUFBb0MyQixDQUFDLEVBQXJDLEVBQXlDO01BQ3JDLEtBQUssSUFBSUssQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLaEMsU0FBekIsRUFBb0NnQyxDQUFDLEVBQXJDLEVBQXlDO1FBQ3JDLElBQU8sS0FBSzlCLFVBQUwsR0FBa0IsS0FBS0YsU0FBeEIsR0FBcUNnQyxDQUF0QyxHQUEyQ1UsQ0FBNUMsSUFBbURBLENBQUMsR0FBSyxLQUFLeEMsVUFBTCxHQUFrQixLQUFLRixTQUF2QixHQUFtQ2dDLENBQXBDLEdBQTBDLEtBQUs5QixVQUFMLEdBQWtCLEtBQUtGLFNBQTdILEVBQTJJO1VBQ3ZJLElBQU0sS0FBS0MsU0FBTCxHQUFpQixLQUFLRCxTQUF0QixHQUFrQzJCLENBQW5DLEdBQXdDZ0IsQ0FBekMsSUFBaURBLENBQUMsR0FBSSxLQUFLMUMsU0FBTCxHQUFpQixLQUFLRCxTQUF0QixHQUFrQzJCLENBQW5DLEdBQXlDLEtBQUsxQixTQUFMLEdBQWlCLEtBQUtELFNBQXhILEVBQXNJO1lBQ2xJLE9BQU8rQixTQUFQO1VBQ0g7O1VBQUE7UUFDSjs7UUFBQTtRQUdEQSxTQUFTO01BQ1o7O01BQUE7SUFDSjs7SUFBQTtFQUNKOztFQUVEYSxnQkFBZ0IsQ0FBQ0MsS0FBRCxFQUFRO0lBQ3BCLElBQUlDLEtBQUssR0FBR0QsS0FBSyxHQUFHLEtBQUs3QyxTQUF6QjtJQUNBLElBQUkrQyxJQUFJLEdBQUdGLEtBQUssR0FBRyxDQUFuQjtJQUNBLElBQUlHLEtBQUssR0FBR0gsS0FBSyxHQUFHLEtBQUs3QyxTQUF6QjtJQUNBLElBQUlpRCxJQUFJLEdBQUdKLEtBQUssR0FBRyxDQUFuQjtJQUNBLE1BQU1LLFFBQVEsR0FBRztNQUFFQyxDQUFDLEVBQUVMLEtBQUw7TUFBWU0sQ0FBQyxFQUFFTCxJQUFmO01BQXFCTSxDQUFDLEVBQUVMLEtBQXhCO01BQStCTSxDQUFDLEVBQUVMO0lBQWxDLENBQWpCO0lBRUEsT0FBT0MsUUFBUDtFQUVIOztFQUVESyxRQUFRLEdBQUc7SUFDUCxNQUFNbEQsS0FBSyxHQUFHLEVBQWQ7O0lBRUEsS0FBSyxJQUFJc0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLM0IsU0FBTCxJQUFrQixDQUF0QyxFQUF5QzJCLENBQUMsRUFBMUMsRUFBOEM7TUFDMUN0QixLQUFLLENBQUNtRCxJQUFOLENBQVc7UUFBRUwsQ0FBQyxFQUFFLEtBQUw7UUFBWUMsQ0FBQyxFQUFFLEtBQWY7UUFBc0JDLENBQUMsRUFBRSxLQUF6QjtRQUFnQ0MsQ0FBQyxFQUFFO01BQW5DLENBQVg7SUFDSCxDQUxNLENBT1A7OztJQUVBLEtBQUssSUFBSTNCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS3hCLFNBQUwsQ0FBZXNELE1BQW5DLEVBQTJDOUIsQ0FBQyxFQUE1QyxFQUFnRDtNQUM1QyxLQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBSzdCLFNBQUwsQ0FBZXdCLENBQWYsRUFBa0IrQixLQUFsQixDQUF3QkQsTUFBNUMsRUFBb0R6QixDQUFDLEVBQXJELEVBQXlEO1FBQ3JELE1BQU0yQixlQUFlLEdBQUlDLEdBQUQsSUFBUztVQUM3QixPQUFPLENBQUMsS0FBS3pELFNBQUwsQ0FBZXdCLENBQWYsRUFBa0IrQixLQUFsQixDQUF3QkcsUUFBeEIsQ0FBaUNELEdBQWpDLENBQVI7UUFDSCxDQUZEOztRQUdBLElBQUlFLGFBQWEsR0FBRyxLQUFLbEIsZ0JBQUwsQ0FBc0IsS0FBS3pDLFNBQUwsQ0FBZXdCLENBQWYsRUFBa0IrQixLQUFsQixDQUF3QjFCLENBQXhCLENBQXRCLENBQXBCOztRQUNBLElBQUkyQixlQUFlLENBQUNHLGFBQWEsQ0FBQ1gsQ0FBZixDQUFuQixFQUFzQztVQUNsQzlDLEtBQUssQ0FBQyxLQUFLRixTQUFMLENBQWV3QixDQUFmLEVBQWtCK0IsS0FBbEIsQ0FBd0IxQixDQUF4QixDQUFELENBQUwsQ0FBa0NtQixDQUFsQyxHQUFzQyxJQUF0QztRQUNIOztRQUFBOztRQUNELElBQUlRLGVBQWUsQ0FBQ0csYUFBYSxDQUFDVixDQUFmLENBQW5CLEVBQXNDO1VBQ2xDL0MsS0FBSyxDQUFDLEtBQUtGLFNBQUwsQ0FBZXdCLENBQWYsRUFBa0IrQixLQUFsQixDQUF3QjFCLENBQXhCLENBQUQsQ0FBTCxDQUFrQ29CLENBQWxDLEdBQXNDLElBQXRDO1FBQ0g7O1FBQUE7O1FBQ0QsSUFBSU8sZUFBZSxDQUFDRyxhQUFhLENBQUNULENBQWYsQ0FBbkIsRUFBc0M7VUFDbENoRCxLQUFLLENBQUMsS0FBS0YsU0FBTCxDQUFld0IsQ0FBZixFQUFrQitCLEtBQWxCLENBQXdCMUIsQ0FBeEIsQ0FBRCxDQUFMLENBQWtDcUIsQ0FBbEMsR0FBc0MsSUFBdEM7UUFDSDs7UUFBQTs7UUFDRCxJQUFJTSxlQUFlLENBQUNHLGFBQWEsQ0FBQ1IsQ0FBZixDQUFuQixFQUFzQztVQUNsQ2pELEtBQUssQ0FBQyxLQUFLRixTQUFMLENBQWV3QixDQUFmLEVBQWtCK0IsS0FBbEIsQ0FBd0IxQixDQUF4QixDQUFELENBQUwsQ0FBa0NzQixDQUFsQyxHQUFzQyxJQUF0QztRQUNIOztRQUFBO01BQ0o7O01BQUE7SUFDSjs7SUFBQTtJQUNELE9BQU9qRCxLQUFQO0VBQ0g7O0VBSURTLGNBQWMsQ0FBQ1AsR0FBRCxFQUFNO0lBQ2hCLElBQUksS0FBS0YsS0FBTCxDQUFXb0QsTUFBWCxLQUFzQixDQUExQixFQUE2QjtNQUN6QixLQUFLcEQsS0FBTCxHQUFhLEtBQUtrRCxRQUFMLEVBQWI7SUFDSDs7SUFFRCxJQUFJeEIsU0FBUyxHQUFHLENBQWhCOztJQUNBLEtBQUssSUFBSUosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxFQUF4QixFQUE0QjtNQUN4QixLQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7UUFDeEIsSUFBSSxLQUFLM0IsS0FBTCxDQUFXMEIsU0FBWCxFQUFzQm9CLENBQTFCLEVBQTZCO1VBQ3pCNUMsR0FBRyxDQUFDYyxTQUFKO1VBQ0FkLEdBQUcsQ0FBQ2dCLFdBQUosQ0FBZ0IsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFoQjtVQUNBaEIsR0FBRyxDQUFDaUIsV0FBSixHQUFrQixNQUFsQjtVQUNBakIsR0FBRyxDQUFDcUIsTUFBSixDQUFZLEtBQUszQixTQUFMLEdBQWlCLENBQWpCLEdBQXFCK0IsQ0FBdEIsR0FBMkIsQ0FBdEMsRUFBMEMsS0FBSzlCLFVBQUwsR0FBa0IsQ0FBbEIsR0FBc0J5QixDQUF2QixHQUE0QixDQUFyRTtVQUNBcEIsR0FBRyxDQUFDc0IsTUFBSixDQUFjLEtBQUs1QixTQUFMLEdBQWlCLENBQWxCLEdBQXVCK0IsQ0FBeEIsR0FBOEIsS0FBSy9CLFNBQUwsR0FBaUIsQ0FBL0MsR0FBb0QsQ0FBaEUsRUFBdUUsS0FBS0EsU0FBTCxHQUFpQixDQUFsQixHQUF1QjBCLENBQXhCLEdBQThCLENBQW5HO1VBQ0FwQixHQUFHLENBQUNtQixNQUFKO1FBQ0g7O1FBQUE7O1FBRUQsSUFBSSxLQUFLckIsS0FBTCxDQUFXMEIsU0FBWCxFQUFzQnFCLENBQTFCLEVBQTZCO1VBQ3pCN0MsR0FBRyxDQUFDYyxTQUFKO1VBQ0FkLEdBQUcsQ0FBQ2dCLFdBQUosQ0FBZ0IsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFoQjtVQUNBaEIsR0FBRyxDQUFDaUIsV0FBSixHQUFrQixNQUFsQjtVQUNBakIsR0FBRyxDQUFDcUIsTUFBSixDQUFhLEtBQUszQixTQUFMLEdBQWlCLENBQWpCLEdBQXFCK0IsQ0FBdEIsR0FBNEIsS0FBSy9CLFNBQUwsR0FBaUIsQ0FBOUMsR0FBb0QsQ0FBL0QsRUFBb0UsS0FBS0MsVUFBTCxHQUFrQixDQUFuQixHQUF3QnlCLENBQXpCLEdBQThCLENBQWhHO1VBQ0FwQixHQUFHLENBQUNzQixNQUFKLENBQWMsS0FBSzVCLFNBQUwsR0FBaUIsQ0FBbEIsR0FBdUIrQixDQUF4QixHQUE4QixLQUFLL0IsU0FBTCxHQUFpQixDQUEvQyxHQUFvRCxDQUFoRSxFQUF1RSxLQUFLQyxVQUFMLEdBQWtCLENBQW5CLEdBQXdCeUIsQ0FBekIsR0FBZ0MsS0FBS3pCLFVBQUwsR0FBa0IsQ0FBbEQsR0FBd0QsQ0FBN0g7VUFDQUssR0FBRyxDQUFDbUIsTUFBSjtRQUNIOztRQUFBOztRQUVELElBQUksS0FBS3JCLEtBQUwsQ0FBVzBCLFNBQVgsRUFBc0JzQixDQUExQixFQUE2QjtVQUN6QjlDLEdBQUcsQ0FBQ2MsU0FBSjtVQUNBZCxHQUFHLENBQUNnQixXQUFKLENBQWdCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBaEI7VUFDQWhCLEdBQUcsQ0FBQ2lCLFdBQUosR0FBa0IsTUFBbEI7VUFDQWpCLEdBQUcsQ0FBQ3FCLE1BQUosQ0FBWSxLQUFLM0IsU0FBTCxHQUFpQixDQUFqQixHQUFxQitCLENBQXRCLEdBQTJCLENBQXRDLEVBQTBDLEtBQUs5QixVQUFMLEdBQWtCLENBQWxCLEdBQXNCeUIsQ0FBdkIsSUFBOEIsS0FBS3pCLFVBQUwsR0FBa0IsQ0FBbkIsR0FBd0IsQ0FBckQsQ0FBekM7VUFDQUssR0FBRyxDQUFDc0IsTUFBSixDQUFjLEtBQUs1QixTQUFMLEdBQWlCLENBQWxCLEdBQXVCK0IsQ0FBeEIsR0FBOEIsS0FBSy9CLFNBQUwsR0FBaUIsQ0FBaEQsR0FBc0QsQ0FBakUsRUFBdUUsS0FBS0MsVUFBTCxHQUFrQixDQUFuQixHQUF3QnlCLENBQXpCLEdBQStCLEtBQUt6QixVQUFMLEdBQWtCLENBQWpELEdBQXNELENBQTNIO1VBQ0FLLEdBQUcsQ0FBQ21CLE1BQUo7UUFDSDs7UUFBQTs7UUFFRCxJQUFJLEtBQUtyQixLQUFMLENBQVcwQixTQUFYLEVBQXNCdUIsQ0FBMUIsRUFBNkI7VUFDekIvQyxHQUFHLENBQUNjLFNBQUo7VUFDQWQsR0FBRyxDQUFDZ0IsV0FBSixDQUFnQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWhCO1VBQ0FoQixHQUFHLENBQUNpQixXQUFKLEdBQWtCLE1BQWxCO1VBQ0FqQixHQUFHLENBQUNxQixNQUFKLENBQWEsS0FBSzNCLFNBQUwsR0FBaUIsQ0FBakIsR0FBcUIrQixDQUF0QixHQUEyQixDQUF2QyxFQUE2QyxLQUFLOUIsVUFBTCxHQUFrQixDQUFuQixHQUF3QnlCLENBQXpCLEdBQThCLENBQXpFO1VBQ0FwQixHQUFHLENBQUNzQixNQUFKLENBQWMsS0FBSzVCLFNBQUwsR0FBaUIsQ0FBbEIsR0FBdUIrQixDQUF4QixHQUE2QixDQUF6QyxFQUFnRCxLQUFLOUIsVUFBTCxHQUFrQixDQUFuQixHQUF3QnlCLENBQXpCLEdBQWdDLEtBQUt6QixVQUFMLEdBQWtCLENBQWxELEdBQXdELENBQXRHO1VBQ0FLLEdBQUcsQ0FBQ21CLE1BQUo7UUFDSDs7UUFBQTtRQUNESyxTQUFTO01BQ1o7O01BQUE7SUFDSjs7SUFBQTtFQUNKOztFQUVEaEIsWUFBWSxDQUFDUixHQUFELEVBQU1DLFlBQU4sRUFBb0I7SUFDNUIsSUFBSSxLQUFLSixRQUFMLENBQWNxRCxNQUFkLEtBQXlCLENBQTdCLEVBQWdDO01BQzVCLEtBQUtyRCxRQUFMLEdBQWdCLElBQUkyRCxLQUFKLENBQVUsRUFBVixFQUFjdkIsSUFBZCxDQUFtQixDQUFuQixDQUFoQjs7TUFDQSxLQUFLLElBQUliLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS3hCLFNBQUwsQ0FBZXNELE1BQW5DLEVBQTJDOUIsQ0FBQyxFQUE1QyxFQUFnRDtRQUM1QyxLQUFLdkIsUUFBTCxDQUFjLEtBQUtELFNBQUwsQ0FBZXdCLENBQWYsRUFBa0IrQixLQUFsQixDQUF3QixDQUF4QixDQUFkLElBQTRDLEtBQUt2RCxTQUFMLENBQWV3QixDQUFmLEVBQWtCcUMsR0FBOUQ7TUFDSDs7TUFBQTtJQUNKOztJQUFBO0lBR0QsSUFBSWpDLFNBQVMsR0FBRyxDQUFoQjs7SUFDQSxLQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsQ0FBcEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7TUFDeEIsS0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLEVBQXhCLEVBQTRCO1FBQ3hCLElBQUksS0FBSzVCLFFBQUwsQ0FBYzJCLFNBQWQsS0FBNEIsQ0FBaEMsRUFBbUM7VUFDL0IsSUFBSXZCLFlBQVksSUFBSSxJQUFoQixJQUF3QnVCLFNBQVMsS0FBS3ZCLFlBQTFDLEVBQXdEO1lBQ3BERCxHQUFHLENBQUNZLFNBQUosR0FBZ0IsU0FBaEI7VUFDSCxDQUZELE1BRU87WUFDSFosR0FBRyxDQUFDWSxTQUFKLEdBQWdCLE9BQWhCO1VBQ0g7O1VBQUE7VUFFRFosR0FBRyxDQUFDYSxRQUFKLENBQWMsS0FBS25CLFNBQUwsR0FBaUIsQ0FBbEIsR0FBdUIrQixDQUFwQyxFQUF5QyxLQUFLOUIsVUFBTCxHQUFrQixDQUFuQixHQUF3QnlCLENBQWhFLEVBQW9FLEVBQXBFLEVBQXdFLEVBQXhFO1VBQ0FwQixHQUFHLENBQUMwQixJQUFKLEdBQVcsWUFBWDtVQUNBMUIsR0FBRyxDQUFDWSxTQUFKLEdBQWdCLGtCQUFoQjtVQUNBWixHQUFHLENBQUMyQixRQUFKLENBQWMsR0FBRSxLQUFLOUIsUUFBTCxDQUFjMkIsU0FBZCxDQUF5QixFQUF6QyxFQUE4QyxLQUFLOUIsU0FBTCxHQUFpQixDQUFsQixHQUF1QitCLENBQXhCLEdBQTZCLENBQXpFLEVBQThFLEtBQUs5QixVQUFMLEdBQWtCLENBQW5CLEdBQXdCeUIsQ0FBekIsR0FBOEIsRUFBMUc7UUFDSDs7UUFBQTtRQUNESSxTQUFTO01BQ1o7O01BQUE7SUFDSjs7SUFBQTtFQUNKOztBQXpQb0I7QUEwUHhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanNfcHJvamVjdC8uL3NyYy9zY3JpcHRzL2NhbnZhc19ib2FyZC5qcz85MjNjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDYW52YXNCb2FyZCB7XG4gICAgY29uc3RydWN0b3IoYm9hcmRTaXplLCBncmlkV2lkdGgsIGdyaWRIZWlnaHQsIHN1bUdyb3Vwcykge1xuICAgICAgICB0aGlzLmJvYXJkU2l6ZSA9IGJvYXJkU2l6ZTtcbiAgICAgICAgdGhpcy5ncmlkV2lkdGggPSBncmlkV2lkdGg7XG4gICAgICAgIHRoaXMuZ3JpZEhlaWdodCA9IGdyaWRIZWlnaHQ7XG4gICAgICAgIHRoaXMuc3VtR3JvdXBzID0gc3VtR3JvdXBzO1xuICAgICAgICB0aGlzLnN1bUNsdWVzID0gW107XG4gICAgICAgIHRoaXMud2FsbHMgPSBbXTtcbiAgICB9O1xuXG4gICAgdXBkYXRlKGN0eCwgc2VsZWN0ZWRDZWxsLCBwZW5NYXJrcywgcGVuY2lsTWFya3MsIGVycm9ycykge1xuICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKGN0eCk7XG4gICAgICAgIGlmIChzZWxlY3RlZENlbGwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRTZWxlY3RlZENlbGwoY3R4LCBzZWxlY3RlZENlbGwpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyYXdTdW1zT3ZlbGF5KGN0eCk7XG4gICAgICAgIHRoaXMuZHJhd1N1bUNsdWVzKGN0eCwgc2VsZWN0ZWRDZWxsKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZExpbmVzKGN0eCk7XG4gICAgICAgIHRoaXMuZHJhd1Blbk1hcmtzKGN0eCwgcGVuTWFya3MsIGVycm9ycyk7XG4gICAgICAgIHRoaXMuZHJhd1BlbmNpbE1hcmtzKGN0eCwgcGVuTWFya3MsIHBlbmNpbE1hcmtzKTtcbiAgICB9XG5cbiAgICBkcmF3QmFja2dyb3VuZChjdHgpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmdyaWRXaWR0aCwgdGhpcy5ncmlkSGVpZ2h0KTtcbiAgICB9XG5cbiAgICBkcmF3R3JpZExpbmVzKGN0eCkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5yZWN0KDAsIDAsIHRoaXMuZ3JpZFdpZHRoLCB0aGlzLmdyaWRIZWlnaHQpO1xuICAgICAgICBjdHguc2V0TGluZURhc2goW10pO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA4O1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJvYXJkU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKDAsICh0aGlzLmdyaWRIZWlnaHQgLyB0aGlzLmJvYXJkU2l6ZSkgKiBpKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5ncmlkV2lkdGgsICh0aGlzLmdyaWRIZWlnaHQgLyB0aGlzLmJvYXJkU2l6ZSkgKiBpKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICAgICAgaWYgKGkgJSAzID09PSAwKSB7IGN0eC5saW5lV2lkdGggPSA0IH07XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oKHRoaXMuZ3JpZFdpZHRoIC8gdGhpcy5ib2FyZFNpemUpICogaSwgMCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKCh0aGlzLmdyaWRXaWR0aCAvIHRoaXMuYm9hcmRTaXplKSAqIGksIHRoaXMuZ3JpZEhlaWdodCk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgICAgIGlmIChpICUgMyA9PT0gMCkgeyBjdHgubGluZVdpZHRoID0gNCB9O1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBkcmF3UGVuTWFya3MoY3R4LCBwZW5NYXJraW5ncywgZXJyb3JzKSB7XG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDk7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChwZW5NYXJraW5nc1tjdXJySW5kZXhdICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZvbnQgPSAnMzBweCBzZXJpZic7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JzW2N1cnJJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiKDE4OSwgMTcsIDE3KSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGAke3Blbk1hcmtpbmdzW2N1cnJJbmRleF19YCwgKHRoaXMuZ3JpZFdpZHRoIC8gOSkgKiBqICsgMjUsICh0aGlzLmdyaWRIZWlnaHQgLyA5KSAqIGkgKyA0NSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjdXJySW5kZXgrK1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZHJhd1BlbmNpbE1hcmtzKGN0eCwgcGVuTWFya2luZ3MsIHBlbmNpbE1hcmtpbmdzKSB7XG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDk7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChwZW5NYXJraW5nc1tjdXJySW5kZXhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZW5jaWxJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgMzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IDM7IHIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5jaWxNYXJraW5nc1tjdXJySW5kZXhdW3BlbmNpbEluZGV4XSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZm9udCA9ICcxNXB4IHNlcmlmJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGAke3BlbmNpbE1hcmtpbmdzW2N1cnJJbmRleF1bcGVuY2lsSW5kZXhdICsgMX1gLCAodGhpcy5ncmlkV2lkdGggLyA5KSAqIGogKyAociAqIDIwKSArIDEwLCAodGhpcy5ncmlkSGVpZ2h0IC8gOSkgKiBpICsgKGMgKiAyMCkgKyAyMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5jaWxJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgaGlnaGxpZ2h0U2VsZWN0ZWRDZWxsKGN0eCwgY2VsbE51bWJlcikge1xuICAgICAgICBsZXQgY3VyckluZGV4ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm9hcmRTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5ib2FyZFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChjdXJySW5kZXggPT09IGNlbGxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QodGhpcy5ncmlkSGVpZ2h0IC8gOSAqIGosIHRoaXMuZ3JpZFdpZHRoIC8gOSAqIGksIHRoaXMuZ3JpZEhlaWdodCAvIDksIHRoaXMuZ3JpZFdpZHRoIC8gOSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNkOWQzYzlcIjtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJJbmRleCA+IGNlbGxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q2VsbE51bWJlcih4LCB5KSB7XG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm9hcmRTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5ib2FyZFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIGlmICgoKCh0aGlzLmdyaWRIZWlnaHQgLyB0aGlzLmJvYXJkU2l6ZSkgKiBqKSA8IHgpICYmICh4IDwgKCh0aGlzLmdyaWRIZWlnaHQgLyB0aGlzLmJvYXJkU2l6ZSAqIGopICsgKHRoaXMuZ3JpZEhlaWdodCAvIHRoaXMuYm9hcmRTaXplKSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoKHRoaXMuZ3JpZFdpZHRoIC8gdGhpcy5ib2FyZFNpemUgKiBpKSA8IHkpICYmICgoeSA8ICh0aGlzLmdyaWRXaWR0aCAvIHRoaXMuYm9hcmRTaXplICogaSkgKyAodGhpcy5ncmlkV2lkdGggLyB0aGlzLmJvYXJkU2l6ZSkpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICAgICBjdXJySW5kZXgrKztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGdldEFkamFjZW50Q2VsbHMoaW5kZXgpIHtcbiAgICAgICAgbGV0IG5vcnRoID0gaW5kZXggLSB0aGlzLmJvYXJkU2l6ZTtcbiAgICAgICAgbGV0IGVhc3QgPSBpbmRleCArIDE7XG4gICAgICAgIGxldCBzb3V0aCA9IGluZGV4ICsgdGhpcy5ib2FyZFNpemU7XG4gICAgICAgIGxldCB3ZXN0ID0gaW5kZXggLSAxO1xuICAgICAgICBjb25zdCBhZGphY2VudCA9IHsgbjogbm9ydGgsIGU6IGVhc3QsIHM6IHNvdXRoLCB3OiB3ZXN0IH07XG5cbiAgICAgICAgcmV0dXJuIGFkamFjZW50O1xuXG4gICAgfTtcblxuICAgIGdldFdhbGxzKCkge1xuICAgICAgICBjb25zdCB3YWxscyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZFNpemUgKiogMjsgaSsrKSB7XG4gICAgICAgICAgICB3YWxscy5wdXNoKHsgbjogZmFsc2UsIGU6IGZhbHNlLCBzOiBmYWxzZSwgdzogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zdCB3YWxscyA9IG5ldyBBcnJheSg4MSkuZmlsbCgpLm1hcCgoeCkgPT4gKHtuOiBmYWxzZSwgZTogZmFsc2UsIHM6IGZhbHNlLCB3OiBmYWxzZX0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdW1Hcm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5zdW1Hcm91cHNbaV0uY2VsbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhZGphY2VudEluY2x1ZGUgPSAoZGlyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5zdW1Hcm91cHNbaV0uY2VsbHMuaW5jbHVkZXMoZGlyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxldCBhZGphY2VudENlbGxzID0gdGhpcy5nZXRBZGphY2VudENlbGxzKHRoaXMuc3VtR3JvdXBzW2ldLmNlbGxzW2pdKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRqYWNlbnRJbmNsdWRlKGFkamFjZW50Q2VsbHMubikpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FsbHNbdGhpcy5zdW1Hcm91cHNbaV0uY2VsbHNbal1dLm4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGFkamFjZW50SW5jbHVkZShhZGphY2VudENlbGxzLmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbGxzW3RoaXMuc3VtR3JvdXBzW2ldLmNlbGxzW2pdXS5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChhZGphY2VudEluY2x1ZGUoYWRqYWNlbnRDZWxscy5zKSkge1xuICAgICAgICAgICAgICAgICAgICB3YWxsc1t0aGlzLnN1bUdyb3Vwc1tpXS5jZWxsc1tqXV0ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYWRqYWNlbnRJbmNsdWRlKGFkamFjZW50Q2VsbHMudykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FsbHNbdGhpcy5zdW1Hcm91cHNbaV0uY2VsbHNbal1dLncgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2FsbHM7XG4gICAgfTtcblxuXG5cbiAgICBkcmF3U3Vtc092ZWxheShjdHgpIHtcbiAgICAgICAgaWYgKHRoaXMud2FsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLndhbGxzID0gdGhpcy5nZXRXYWxscygpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VyckluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgOTsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2FsbHNbY3VyckluZGV4XS5uKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKFs1LCA1XSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmV5JztcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbygodGhpcy5ncmlkV2lkdGggLyA5ICogaikgKyA3LCAodGhpcy5ncmlkSGVpZ2h0IC8gOSAqIGkpICsgNylcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbygoKCh0aGlzLmdyaWRXaWR0aCAvIDkpICogaikgKyAodGhpcy5ncmlkV2lkdGggLyA5KSAtIDcpLCAoKCh0aGlzLmdyaWRXaWR0aCAvIDkpICogaSkgKyAoNykpKVxuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndhbGxzW2N1cnJJbmRleF0uZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChbNSwgNV0pO1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnZ3JleSc7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oKCh0aGlzLmdyaWRXaWR0aCAvIDkgKiBqKSArICh0aGlzLmdyaWRXaWR0aCAvIDkpKSAtIDcsICgodGhpcy5ncmlkSGVpZ2h0IC8gOSkgKiBpKSArIDcpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oKCgodGhpcy5ncmlkV2lkdGggLyA5KSAqIGopICsgKHRoaXMuZ3JpZFdpZHRoIC8gOSkgLSA3KSwgKCgodGhpcy5ncmlkSGVpZ2h0IC8gOSkgKiBpKSArICgodGhpcy5ncmlkSGVpZ2h0IC8gOSkpIC0gNykpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2FsbHNbY3VyckluZGV4XS5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKFs1LCA1XSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmV5JztcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbygodGhpcy5ncmlkV2lkdGggLyA5ICogaikgKyA3LCAodGhpcy5ncmlkSGVpZ2h0IC8gOSAqIGkpICsgKCh0aGlzLmdyaWRIZWlnaHQgLyA5KSAtIDcpKVxuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKCgoKHRoaXMuZ3JpZFdpZHRoIC8gOSkgKiBqKSArICh0aGlzLmdyaWRXaWR0aCAvIDkpKSAtIDcsICgoKHRoaXMuZ3JpZEhlaWdodCAvIDkpICogaSkgKyAodGhpcy5ncmlkSGVpZ2h0IC8gOSkgLSA3KSlcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy53YWxsc1tjdXJySW5kZXhdLncpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBjdHguc2V0TGluZURhc2goWzUsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2dyZXknO1xuICAgICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKCgodGhpcy5ncmlkV2lkdGggLyA5ICogaikgKyA3KSwgKCh0aGlzLmdyaWRIZWlnaHQgLyA5KSAqIGkpICsgNylcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbygoKCh0aGlzLmdyaWRXaWR0aCAvIDkpICogaikgKyA3KSwgKCgodGhpcy5ncmlkSGVpZ2h0IC8gOSkgKiBpKSArICgodGhpcy5ncmlkSGVpZ2h0IC8gOSkpIC0gNykpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZHJhd1N1bUNsdWVzKGN0eCwgc2VsZWN0ZWRDZWxsKSB7XG4gICAgICAgIGlmICh0aGlzLnN1bUNsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdW1DbHVlcyA9IG5ldyBBcnJheSg4MSkuZmlsbCgwKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1bUdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VtQ2x1ZXNbdGhpcy5zdW1Hcm91cHNbaV0uY2VsbHNbMF1dID0gdGhpcy5zdW1Hcm91cHNbaV0uc3VtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA5OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdW1DbHVlc1tjdXJySW5kZXhdICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ2VsbCAhPSBudWxsICYmIGN1cnJJbmRleCA9PT0gc2VsZWN0ZWRDZWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNkOWQzYzknO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KCh0aGlzLmdyaWRXaWR0aCAvIDkpICogaiwgKCh0aGlzLmdyaWRIZWlnaHQgLyA5KSAqIGkpLCAxNywgMTcpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZm9udCA9ICcxMHB4IHNlcmlmJztcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2IoMTg5LCAxNywgMTcpJztcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGAke3RoaXMuc3VtQ2x1ZXNbY3VyckluZGV4XX1gLCAoKHRoaXMuZ3JpZFdpZHRoIC8gOSkgKiBqKSArIDUsICgodGhpcy5ncmlkSGVpZ2h0IC8gOSkgKiBpKSArIDE1KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGN1cnJJbmRleCsrO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJDYW52YXNCb2FyZCIsImNvbnN0cnVjdG9yIiwiYm9hcmRTaXplIiwiZ3JpZFdpZHRoIiwiZ3JpZEhlaWdodCIsInN1bUdyb3VwcyIsInN1bUNsdWVzIiwid2FsbHMiLCJ1cGRhdGUiLCJjdHgiLCJzZWxlY3RlZENlbGwiLCJwZW5NYXJrcyIsInBlbmNpbE1hcmtzIiwiZXJyb3JzIiwiZHJhd0JhY2tncm91bmQiLCJoaWdobGlnaHRTZWxlY3RlZENlbGwiLCJkcmF3U3Vtc092ZWxheSIsImRyYXdTdW1DbHVlcyIsImRyYXdHcmlkTGluZXMiLCJkcmF3UGVuTWFya3MiLCJkcmF3UGVuY2lsTWFya3MiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImJlZ2luUGF0aCIsInJlY3QiLCJzZXRMaW5lRGFzaCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiaSIsIm1vdmVUbyIsImxpbmVUbyIsInBlbk1hcmtpbmdzIiwiY3VyckluZGV4IiwiaiIsImZvbnQiLCJmaWxsVGV4dCIsInBlbmNpbE1hcmtpbmdzIiwicGVuY2lsSW5kZXgiLCJjIiwiciIsImNlbGxOdW1iZXIiLCJmaWxsIiwiZ2V0Q2VsbE51bWJlciIsIngiLCJ5IiwiZ2V0QWRqYWNlbnRDZWxscyIsImluZGV4Iiwibm9ydGgiLCJlYXN0Iiwic291dGgiLCJ3ZXN0IiwiYWRqYWNlbnQiLCJuIiwiZSIsInMiLCJ3IiwiZ2V0V2FsbHMiLCJwdXNoIiwibGVuZ3RoIiwiY2VsbHMiLCJhZGphY2VudEluY2x1ZGUiLCJkaXIiLCJpbmNsdWRlcyIsImFkamFjZW50Q2VsbHMiLCJBcnJheSIsInN1bSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/canvas_board.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": function() { return /* binding */ Game; }\n/* harmony export */ });\nclass Game {\n  constructor(sumGroups) {\n    let gridSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 81;\n    this.gridSize = gridSize;\n    this.penMarks = new Array(gridSize).fill(0);\n    this.pencilMarks = new Array(gridSize).fill(-1);\n    this.errors = new Array(gridSize).fill(false);\n    this.sumGroups = sumGroups;\n    this.rowMaps = [];\n    this.colMaps = [];\n    this.sqrMaps = [];\n    this.sumMaps = [];\n  }\n\n  getMaps() {\n    if (this.rowMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.rowMaps.push(i);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.colMaps.length === 0) {\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        for (let i = 0; i < Math.sqrt(this.gridSize); i++) {\n          for (let j = 0; j < Math.sqrt(this.gridSize); j++) {\n            this.colMaps.push(j);\n            currIndex++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sqrMaps.length === 0) {\n      this.sqrMaps = new Array(this.gridSize).fill(-1);\n      let currIndex = 0;\n\n      while (currIndex < this.gridSize) {\n        if (this.colMaps[currIndex] < 3) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 0;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 3;\n          } else {\n            this.sqrMaps[currIndex] = 6;\n          }\n\n          ;\n        } else if (this.colMaps[currIndex] < 6) {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 1;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 4;\n          } else {\n            this.sqrMaps[currIndex] = 7;\n          }\n\n          ;\n        } else {\n          if (this.rowMaps[currIndex] < 3) {\n            this.sqrMaps[currIndex] = 2;\n          } else if (this.rowMaps[currIndex] < 6) {\n            this.sqrMaps[currIndex] = 5;\n          } else {\n            this.sqrMaps[currIndex] = 8;\n          }\n\n          ;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (this.sumMaps.length === 0) {\n      console.log('in sumMaps');\n      console.log(this.sumGroups[0].cells);\n      this.sumMaps = new Array(this.gridSize).fill(0);\n      let currIndex = 0;\n\n      for (let group of this.sumGroups) {\n        for (let i = 0; i < group.cells.length; i++) {\n          this.sumMaps[group.cells[i]] = currIndex;\n        }\n\n        ;\n        currIndex++;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  checkErrors() {\n    let rowErrors = this.getGroupErrors(this.rowMaps);\n    let colErrors = this.getGroupErrors(this.colMaps);\n    let sqrErrors = this.getGroupErrors(this.sqrMaps); // let sumErrors = this.getGroupErrors(this.sumMaps);\n\n    this.errors = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      if (rowErrors[i] || colErrors[i] || sqrErrors[i]) {\n        this.errors.push(true);\n      } else {\n        this.errors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  checkGroup(group) {\n    let counts = {};\n    let seen = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (seen.includes(group[i])) {\n        counts[group[i]] += 1;\n      } else {\n        seen.push(group[i]);\n        counts[group[i]] = 1;\n      }\n\n      ;\n    }\n\n    ;\n    let groupErrors = [];\n\n    for (let i = 0; i < group.length; i++) {\n      if (counts[group[i]] > 1) {\n        groupErrors.push(true);\n      } else {\n        groupErrors.push(false);\n      }\n\n      ;\n    }\n\n    ;\n    return groupErrors;\n  }\n\n  getGroupErrors(groupMap) {\n    let groupErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let group = [];\n\n      for (let j = 0; j < 81; j++) {\n        if (groupMap[j] === i) {\n          group.push(this.penMarks[j]);\n        }\n\n        ;\n      }\n\n      ;\n      groupErrors = groupErrors.concat(this.checkGroup(group));\n    }\n\n    ;\n    let remappedErrors = [];\n\n    for (let i = 0; i < 9; i++) {\n      let subA = [];\n      remappedErrors.push(subA);\n    }\n\n    ;\n\n    for (let i = 0; i < groupErrors.length; i++) {\n      remappedErrors[groupMap[i]].push(groupErrors[i]);\n    }\n\n    return remappedErrors.flat();\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/sample_inputs.js":
/*!**************************************!*\
  !*** ./src/scripts/sample_inputs.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SampleInputs\": function() { return /* binding */ SampleInputs; }\n/* harmony export */ });\nclass SampleInputs {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 81;\n    this.gridSize = gridSize;\n    this.samplePenMarks = [6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.blankPenMarks = new Array(this.gridSize).fill(0);\n    this.samplePencilMarks = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      let cell = [];\n\n      for (let j = 0; j < 9; j++) {\n        cell.push(-1);\n      }\n\n      this.samplePencilMarks.push(cell);\n    }\n\n    ;\n    this.sampleGroups = [{\n      sum: 11,\n      cells: [0, 9, 10, 19]\n    }, {\n      sum: 25,\n      cells: [1, 2, 3, 12]\n    }, {\n      sum: 14,\n      cells: [4, 13]\n    }, {\n      sum: 9,\n      cells: [5, 6]\n    }, {\n      sum: 12,\n      cells: [7, 8]\n    }, {\n      sum: 15,\n      cells: [11, 20]\n    }, {\n      sum: 4,\n      cells: [14, 15]\n    }, {\n      sum: 14,\n      cells: [16, 25]\n    }, {\n      sum: 6,\n      cells: [17, 26]\n    }, {\n      sum: 40,\n      cells: [18, 27, 36, 37, 38, 39, 45, 54]\n    }, {\n      sum: 3,\n      cells: [21, 30]\n    }, {\n      sum: 15,\n      cells: [22, 31]\n    }, {\n      sum: 9,\n      cells: [23, 24]\n    }, {\n      sum: 8,\n      cells: [28, 29]\n    }, {\n      sum: 12,\n      cells: [32, 33]\n    }, {\n      sum: 38,\n      cells: [34, 35, 42, 43, 44, 52, 53]\n    }, {\n      sum: 11,\n      cells: [40, 41]\n    }, {\n      sum: 15,\n      cells: [46, 47]\n    }, {\n      sum: 13,\n      cells: [48, 57]\n    }, {\n      sum: 6,\n      cells: [49, 58]\n    }, {\n      sum: 4,\n      cells: [50, 51]\n    }, {\n      sum: 17,\n      cells: [55, 63, 64, 72]\n    }, {\n      sum: 7,\n      cells: [56, 65]\n    }, {\n      sum: 13,\n      cells: [59, 60]\n    }, {\n      sum: 10,\n      cells: [61, 70]\n    }, {\n      sum: 6,\n      cells: [62, 71]\n    }, {\n      sum: 26,\n      cells: [66, 73, 74, 75]\n    }, {\n      sum: 4,\n      cells: [67, 76]\n    }, {\n      sum: 15,\n      cells: [68, 69]\n    }, {\n      sum: 11,\n      cells: [77, 78]\n    }, {\n      sum: 12,\n      cells: [79, 80]\n    }]; // Error checking\n\n    this.penErrors = [6, 0, 0, 6, 0, 8, 0, 0, 0, 0, 6, 0, 6, 0, 0, 8, 0, 9, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 2, 0, 3, 0, 0, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0, 6];\n    this.penIndeces = [];\n\n    for (let i = 0; i < 81; i++) {\n      this.penIndeces.push(i);\n    }\n\n    ;\n  }\n\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/sample_inputs.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;